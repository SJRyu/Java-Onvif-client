
package org.onvif.ver10.device.wsdl;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.Duration;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;
import org.onvif.ver10.schema.AttachmentData;
import org.onvif.ver10.schema.BackupFile;
import org.onvif.ver10.schema.BinaryData;
import org.onvif.ver10.schema.Capabilities;
import org.onvif.ver10.schema.CapabilityCategory;
import org.onvif.ver10.schema.Certificate;
import org.onvif.ver10.schema.CertificateInformation;
import org.onvif.ver10.schema.CertificateStatus;
import org.onvif.ver10.schema.CertificateWithPrivateKey;
import org.onvif.ver10.schema.DNSInformation;
import org.onvif.ver10.schema.DateTime;
import org.onvif.ver10.schema.DiscoveryMode;
import org.onvif.ver10.schema.Dot11AvailableNetworks;
import org.onvif.ver10.schema.Dot11Status;
import org.onvif.ver10.schema.Dot1XConfiguration;
import org.onvif.ver10.schema.DynamicDNSInformation;
import org.onvif.ver10.schema.DynamicDNSType;
import org.onvif.ver10.schema.FactoryDefaultType;
import org.onvif.ver10.schema.HostnameInformation;
import org.onvif.ver10.schema.IPAddress;
import org.onvif.ver10.schema.IPAddressFilter;
import org.onvif.ver10.schema.LocationEntity;
import org.onvif.ver10.schema.NTPInformation;
import org.onvif.ver10.schema.NetworkGateway;
import org.onvif.ver10.schema.NetworkHost;
import org.onvif.ver10.schema.NetworkInterface;
import org.onvif.ver10.schema.NetworkInterfaceSetConfiguration;
import org.onvif.ver10.schema.NetworkProtocol;
import org.onvif.ver10.schema.NetworkZeroConfiguration;
import org.onvif.ver10.schema.RelayLogicalState;
import org.onvif.ver10.schema.RelayOutput;
import org.onvif.ver10.schema.RelayOutputSettings;
import org.onvif.ver10.schema.RemoteUser;
import org.onvif.ver10.schema.Scope;
import org.onvif.ver10.schema.SetDateTimeType;
import org.onvif.ver10.schema.SupportInformation;
import org.onvif.ver10.schema.SystemDateTime;
import org.onvif.ver10.schema.SystemLog;
import org.onvif.ver10.schema.SystemLogType;
import org.onvif.ver10.schema.SystemLogUriList;
import org.onvif.ver10.schema.TimeZone;
import org.onvif.ver10.schema.User;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Device", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
@XmlSeeAlso({
    org.onvif.ver10.device.wsdl.ObjectFactory.class,
    org.oasis_open.docs.wsn.b_2.ObjectFactory.class,
    org.oasis_open.docs.wsn.t_1.ObjectFactory.class,
    org.oasis_open.docs.wsrf.bf_2.ObjectFactory.class,
    org.onvif.ver10.schema.ObjectFactory.class,
    org.w3._2003._05.soap_envelope.ObjectFactory.class,
    org.w3._2004._08.xop.include.ObjectFactory.class,
    org.w3._2005._05.xmlmime.ObjectFactory.class,
    org.w3._2005._08.addressing.ObjectFactory.class
})
public interface Device {


    /**
     * Returns information about services on the device.
     * 
     * @param includeCapability
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetServicesResponse>
     */
    @WebMethod(operationName = "GetServices", action = "http://www.onvif.org/ver10/device/wsdl/GetServices")
    @RequestWrapper(localName = "GetServices", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServices")
    @ResponseWrapper(localName = "GetServicesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServicesResponse")
    public Response<GetServicesResponse> getServicesAsync(
        @WebParam(name = "IncludeCapability", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean includeCapability);

    /**
     * Returns information about services on the device.
     * 
     * @param asyncHandler
     * @param includeCapability
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetServices", action = "http://www.onvif.org/ver10/device/wsdl/GetServices")
    @RequestWrapper(localName = "GetServices", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServices")
    @ResponseWrapper(localName = "GetServicesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServicesResponse")
    public Future<?> getServicesAsync(
        @WebParam(name = "IncludeCapability", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean includeCapability,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServicesResponse> asyncHandler);

    /**
     * Returns information about services on the device.
     * 
     * @param includeCapability
     * @return
     *     returns java.util.List<org.onvif.ver10.device.wsdl.Service>
     */
    @WebMethod(operationName = "GetServices", action = "http://www.onvif.org/ver10/device/wsdl/GetServices")
    @WebResult(name = "Service", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetServices", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServices")
    @ResponseWrapper(localName = "GetServicesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServicesResponse")
    public List<Service> getServices(
        @WebParam(name = "IncludeCapability", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean includeCapability);

    /**
     * Returns the capabilities of the device service. The result is returned in a typed answer.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetServiceCapabilitiesResponse>
     */
    @WebMethod(operationName = "GetServiceCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities")
    @RequestWrapper(localName = "GetServiceCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilities")
    @ResponseWrapper(localName = "GetServiceCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilitiesResponse")
    public Response<GetServiceCapabilitiesResponse> getServiceCapabilitiesAsync();

    /**
     * Returns the capabilities of the device service. The result is returned in a typed answer.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetServiceCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities")
    @RequestWrapper(localName = "GetServiceCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilities")
    @ResponseWrapper(localName = "GetServiceCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilitiesResponse")
    public Future<?> getServiceCapabilitiesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServiceCapabilitiesResponse> asyncHandler);

    /**
     * Returns the capabilities of the device service. The result is returned in a typed answer.
     * 
     * @return
     *     returns org.onvif.ver10.device.wsdl.DeviceServiceCapabilities
     */
    @WebMethod(operationName = "GetServiceCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities")
    @WebResult(name = "Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetServiceCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilities")
    @ResponseWrapper(localName = "GetServiceCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilitiesResponse")
    public DeviceServiceCapabilities getServiceCapabilities();

    /**
     * This operation gets basic device information from the device.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDeviceInformationResponse>
     */
    @WebMethod(operationName = "GetDeviceInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation")
    @RequestWrapper(localName = "GetDeviceInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformation")
    @ResponseWrapper(localName = "GetDeviceInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformationResponse")
    public Response<GetDeviceInformationResponse> getDeviceInformationAsync();

    /**
     * This operation gets basic device information from the device.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDeviceInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation")
    @RequestWrapper(localName = "GetDeviceInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformation")
    @ResponseWrapper(localName = "GetDeviceInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformationResponse")
    public Future<?> getDeviceInformationAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDeviceInformationResponse> asyncHandler);

    /**
     * This operation gets basic device information from the device.
     * 
     * @param model
     * @param manufacturer
     * @param firmwareVersion
     * @param serialNumber
     * @param hardwareId
     */
    @WebMethod(operationName = "GetDeviceInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation")
    @RequestWrapper(localName = "GetDeviceInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformation")
    @ResponseWrapper(localName = "GetDeviceInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformationResponse")
    public void getDeviceInformation(
        @WebParam(name = "Manufacturer", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> manufacturer,
        @WebParam(name = "Model", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> model,
        @WebParam(name = "FirmwareVersion", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> firmwareVersion,
        @WebParam(name = "SerialNumber", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> serialNumber,
        @WebParam(name = "HardwareId", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> hardwareId);

    /**
     * 
     * @param dateTimeType
     * @param timeZone
     * @param utcDateTime
     * @param daylightSavings
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetSystemDateAndTimeResponse>
     */
    @WebMethod(operationName = "SetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime")
    @RequestWrapper(localName = "SetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTime")
    @ResponseWrapper(localName = "SetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTimeResponse")
    public Response<SetSystemDateAndTimeResponse> setSystemDateAndTimeAsync(
        @WebParam(name = "DateTimeType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SetDateTimeType dateTimeType,
        @WebParam(name = "DaylightSavings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean daylightSavings,
        @WebParam(name = "TimeZone", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        TimeZone timeZone,
        @WebParam(name = "UTCDateTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DateTime utcDateTime);

    /**
     * 
     * @param dateTimeType
     * @param asyncHandler
     * @param timeZone
     * @param utcDateTime
     * @param daylightSavings
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime")
    @RequestWrapper(localName = "SetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTime")
    @ResponseWrapper(localName = "SetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTimeResponse")
    public Future<?> setSystemDateAndTimeAsync(
        @WebParam(name = "DateTimeType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SetDateTimeType dateTimeType,
        @WebParam(name = "DaylightSavings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean daylightSavings,
        @WebParam(name = "TimeZone", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        TimeZone timeZone,
        @WebParam(name = "UTCDateTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DateTime utcDateTime,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetSystemDateAndTimeResponse> asyncHandler);

    /**
     * 
     * @param dateTimeType
     * @param timeZone
     * @param utcDateTime
     * @param daylightSavings
     */
    @WebMethod(operationName = "SetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime")
    @RequestWrapper(localName = "SetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTime")
    @ResponseWrapper(localName = "SetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTimeResponse")
    public void setSystemDateAndTime(
        @WebParam(name = "DateTimeType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SetDateTimeType dateTimeType,
        @WebParam(name = "DaylightSavings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean daylightSavings,
        @WebParam(name = "TimeZone", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        TimeZone timeZone,
        @WebParam(name = "UTCDateTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DateTime utcDateTime);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetSystemDateAndTimeResponse>
     */
    @WebMethod(operationName = "GetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime")
    @RequestWrapper(localName = "GetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTime")
    @ResponseWrapper(localName = "GetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTimeResponse")
    public Response<GetSystemDateAndTimeResponse> getSystemDateAndTimeAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime")
    @RequestWrapper(localName = "GetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTime")
    @ResponseWrapper(localName = "GetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTimeResponse")
    public Future<?> getSystemDateAndTimeAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSystemDateAndTimeResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns org.onvif.ver10.schema.SystemDateTime
     */
    @WebMethod(operationName = "GetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime")
    @WebResult(name = "SystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTime")
    @ResponseWrapper(localName = "GetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTimeResponse")
    public SystemDateTime getSystemDateAndTime();

    /**
     * This operation reloads the parameters on the device to their factory default values.
     * 
     * @param factoryDefault
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetSystemFactoryDefaultResponse>
     */
    @WebMethod(operationName = "SetSystemFactoryDefault", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault")
    @RequestWrapper(localName = "SetSystemFactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefault")
    @ResponseWrapper(localName = "SetSystemFactoryDefaultResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefaultResponse")
    public Response<SetSystemFactoryDefaultResponse> setSystemFactoryDefaultAsync(
        @WebParam(name = "FactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        FactoryDefaultType factoryDefault);

    /**
     * This operation reloads the parameters on the device to their factory default values.
     * 
     * @param asyncHandler
     * @param factoryDefault
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetSystemFactoryDefault", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault")
    @RequestWrapper(localName = "SetSystemFactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefault")
    @ResponseWrapper(localName = "SetSystemFactoryDefaultResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefaultResponse")
    public Future<?> setSystemFactoryDefaultAsync(
        @WebParam(name = "FactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        FactoryDefaultType factoryDefault,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetSystemFactoryDefaultResponse> asyncHandler);

    /**
     * This operation reloads the parameters on the device to their factory default values.
     * 
     * @param factoryDefault
     */
    @WebMethod(operationName = "SetSystemFactoryDefault", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault")
    @RequestWrapper(localName = "SetSystemFactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefault")
    @ResponseWrapper(localName = "SetSystemFactoryDefaultResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefaultResponse")
    public void setSystemFactoryDefault(
        @WebParam(name = "FactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        FactoryDefaultType factoryDefault);

    /**
     * This operation upgrades a device firmware version. After a successful upgrade the response
     * 				message is sent before the device reboots. The device should support firmware upgrade
     * 				through the UpgradeSystemFirmware command. The exact format of the firmware data is
     * 				outside the scope of this standard.
     * 
     * @param firmware
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.UpgradeSystemFirmwareResponse>
     */
    @WebMethod(operationName = "UpgradeSystemFirmware", action = "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware")
    @RequestWrapper(localName = "UpgradeSystemFirmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmware")
    @ResponseWrapper(localName = "UpgradeSystemFirmwareResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmwareResponse")
    public Response<UpgradeSystemFirmwareResponse> upgradeSystemFirmwareAsync(
        @WebParam(name = "Firmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        AttachmentData firmware);

    /**
     * This operation upgrades a device firmware version. After a successful upgrade the response
     * 				message is sent before the device reboots. The device should support firmware upgrade
     * 				through the UpgradeSystemFirmware command. The exact format of the firmware data is
     * 				outside the scope of this standard.
     * 
     * @param firmware
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "UpgradeSystemFirmware", action = "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware")
    @RequestWrapper(localName = "UpgradeSystemFirmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmware")
    @ResponseWrapper(localName = "UpgradeSystemFirmwareResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmwareResponse")
    public Future<?> upgradeSystemFirmwareAsync(
        @WebParam(name = "Firmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        AttachmentData firmware,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpgradeSystemFirmwareResponse> asyncHandler);

    /**
     * This operation upgrades a device firmware version. After a successful upgrade the response
     * 				message is sent before the device reboots. The device should support firmware upgrade
     * 				through the UpgradeSystemFirmware command. The exact format of the firmware data is
     * 				outside the scope of this standard.
     * 
     * @param firmware
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "UpgradeSystemFirmware", action = "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware")
    @WebResult(name = "Message", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "UpgradeSystemFirmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmware")
    @ResponseWrapper(localName = "UpgradeSystemFirmwareResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmwareResponse")
    public String upgradeSystemFirmware(
        @WebParam(name = "Firmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        AttachmentData firmware);

    /**
     * This operation reboots the device.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SystemRebootResponse>
     */
    @WebMethod(operationName = "SystemReboot", action = "http://www.onvif.org/ver10/device/wsdl/SystemReboot")
    @RequestWrapper(localName = "SystemReboot", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemReboot")
    @ResponseWrapper(localName = "SystemRebootResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemRebootResponse")
    public Response<SystemRebootResponse> systemRebootAsync();

    /**
     * This operation reboots the device.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SystemReboot", action = "http://www.onvif.org/ver10/device/wsdl/SystemReboot")
    @RequestWrapper(localName = "SystemReboot", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemReboot")
    @ResponseWrapper(localName = "SystemRebootResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemRebootResponse")
    public Future<?> systemRebootAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SystemRebootResponse> asyncHandler);

    /**
     * This operation reboots the device.
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "SystemReboot", action = "http://www.onvif.org/ver10/device/wsdl/SystemReboot")
    @WebResult(name = "Message", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SystemReboot", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemReboot")
    @ResponseWrapper(localName = "SystemRebootResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemRebootResponse")
    public String systemReboot();

    /**
     * This operation restores the system backup configuration files(s) previously retrieved from a
     * 				device. The device should support restore of backup configuration file(s) through the
     * 				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
     * 				scope of this standard. If the command is supported, it shall accept backup files returned by
     * 				the GetSystemBackup command.
     * 
     * @param backupFiles
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.RestoreSystemResponse>
     */
    @WebMethod(operationName = "RestoreSystem", action = "http://www.onvif.org/ver10/device/wsdl/RestoreSystem")
    @RequestWrapper(localName = "RestoreSystem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystem")
    @ResponseWrapper(localName = "RestoreSystemResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystemResponse")
    public Response<RestoreSystemResponse> restoreSystemAsync(
        @WebParam(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<BackupFile> backupFiles);

    /**
     * This operation restores the system backup configuration files(s) previously retrieved from a
     * 				device. The device should support restore of backup configuration file(s) through the
     * 				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
     * 				scope of this standard. If the command is supported, it shall accept backup files returned by
     * 				the GetSystemBackup command.
     * 
     * @param backupFiles
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "RestoreSystem", action = "http://www.onvif.org/ver10/device/wsdl/RestoreSystem")
    @RequestWrapper(localName = "RestoreSystem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystem")
    @ResponseWrapper(localName = "RestoreSystemResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystemResponse")
    public Future<?> restoreSystemAsync(
        @WebParam(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<BackupFile> backupFiles,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RestoreSystemResponse> asyncHandler);

    /**
     * This operation restores the system backup configuration files(s) previously retrieved from a
     * 				device. The device should support restore of backup configuration file(s) through the
     * 				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
     * 				scope of this standard. If the command is supported, it shall accept backup files returned by
     * 				the GetSystemBackup command.
     * 
     * @param backupFiles
     */
    @WebMethod(operationName = "RestoreSystem", action = "http://www.onvif.org/ver10/device/wsdl/RestoreSystem")
    @RequestWrapper(localName = "RestoreSystem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystem")
    @ResponseWrapper(localName = "RestoreSystemResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystemResponse")
    public void restoreSystem(
        @WebParam(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<BackupFile> backupFiles);

    /**
     * This operation is retrieves system backup configuration file(s) from a device. The device
     * 				should support return of back up configuration file(s) through the GetSystemBackup command.
     * 				The backup is returned with reference to a name and mime-type together with binary data.
     * 				The exact format of the backup configuration files is outside the scope of this standard.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetSystemBackupResponse>
     */
    @WebMethod(operationName = "GetSystemBackup", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup")
    @RequestWrapper(localName = "GetSystemBackup", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackup")
    @ResponseWrapper(localName = "GetSystemBackupResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackupResponse")
    public Response<GetSystemBackupResponse> getSystemBackupAsync();

    /**
     * This operation is retrieves system backup configuration file(s) from a device. The device
     * 				should support return of back up configuration file(s) through the GetSystemBackup command.
     * 				The backup is returned with reference to a name and mime-type together with binary data.
     * 				The exact format of the backup configuration files is outside the scope of this standard.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetSystemBackup", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup")
    @RequestWrapper(localName = "GetSystemBackup", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackup")
    @ResponseWrapper(localName = "GetSystemBackupResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackupResponse")
    public Future<?> getSystemBackupAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSystemBackupResponse> asyncHandler);

    /**
     * This operation is retrieves system backup configuration file(s) from a device. The device
     * 				should support return of back up configuration file(s) through the GetSystemBackup command.
     * 				The backup is returned with reference to a name and mime-type together with binary data.
     * 				The exact format of the backup configuration files is outside the scope of this standard.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.BackupFile>
     */
    @WebMethod(operationName = "GetSystemBackup", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup")
    @WebResult(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemBackup", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackup")
    @ResponseWrapper(localName = "GetSystemBackupResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackupResponse")
    public List<BackupFile> getSystemBackup();

    /**
     * This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
     * 
     * @param logType
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetSystemLogResponse>
     */
    @WebMethod(operationName = "GetSystemLog", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemLog")
    @RequestWrapper(localName = "GetSystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLog")
    @ResponseWrapper(localName = "GetSystemLogResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLogResponse")
    public Response<GetSystemLogResponse> getSystemLogAsync(
        @WebParam(name = "LogType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SystemLogType logType);

    /**
     * This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
     * 
     * @param asyncHandler
     * @param logType
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetSystemLog", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemLog")
    @RequestWrapper(localName = "GetSystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLog")
    @ResponseWrapper(localName = "GetSystemLogResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLogResponse")
    public Future<?> getSystemLogAsync(
        @WebParam(name = "LogType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SystemLogType logType,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSystemLogResponse> asyncHandler);

    /**
     * This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
     * 
     * @param logType
     * @return
     *     returns org.onvif.ver10.schema.SystemLog
     */
    @WebMethod(operationName = "GetSystemLog", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemLog")
    @WebResult(name = "SystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLog")
    @ResponseWrapper(localName = "GetSystemLogResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLogResponse")
    public SystemLog getSystemLog(
        @WebParam(name = "LogType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        SystemLogType logType);

    /**
     * This operation gets arbitary device diagnostics information from the device.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetSystemSupportInformationResponse>
     */
    @WebMethod(operationName = "GetSystemSupportInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation")
    @RequestWrapper(localName = "GetSystemSupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformation")
    @ResponseWrapper(localName = "GetSystemSupportInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformationResponse")
    public Response<GetSystemSupportInformationResponse> getSystemSupportInformationAsync();

    /**
     * This operation gets arbitary device diagnostics information from the device.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetSystemSupportInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation")
    @RequestWrapper(localName = "GetSystemSupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformation")
    @ResponseWrapper(localName = "GetSystemSupportInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformationResponse")
    public Future<?> getSystemSupportInformationAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSystemSupportInformationResponse> asyncHandler);

    /**
     * This operation gets arbitary device diagnostics information from the device.
     * 
     * @return
     *     returns org.onvif.ver10.schema.SupportInformation
     */
    @WebMethod(operationName = "GetSystemSupportInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation")
    @WebResult(name = "SupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemSupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformation")
    @ResponseWrapper(localName = "GetSystemSupportInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformationResponse")
    public SupportInformation getSystemSupportInformation();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetScopesResponse>
     */
    @WebMethod(operationName = "GetScopes", action = "http://www.onvif.org/ver10/device/wsdl/GetScopes")
    @RequestWrapper(localName = "GetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopes")
    @ResponseWrapper(localName = "GetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopesResponse")
    public Response<GetScopesResponse> getScopesAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetScopes", action = "http://www.onvif.org/ver10/device/wsdl/GetScopes")
    @RequestWrapper(localName = "GetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopes")
    @ResponseWrapper(localName = "GetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopesResponse")
    public Future<?> getScopesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetScopesResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.Scope>
     */
    @WebMethod(operationName = "GetScopes", action = "http://www.onvif.org/ver10/device/wsdl/GetScopes")
    @WebResult(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopes")
    @ResponseWrapper(localName = "GetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopesResponse")
    public List<Scope> getScopes();

    /**
     * This operation sets the scope parameters of a device. The scope parameters are used in the
     * 				device discovery to match a probe message.
     * 				This operation replaces all existing configurable scope parameters (not fixed parameters). If
     * 				this shall be avoided, one should use the scope add command instead. The device shall
     * 				support configuration of discovery scope parameters through the SetScopes command.
     * 
     * @param scopes
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetScopesResponse>
     */
    @WebMethod(operationName = "SetScopes", action = "http://www.onvif.org/ver10/device/wsdl/SetScopes")
    @RequestWrapper(localName = "SetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopes")
    @ResponseWrapper(localName = "SetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopesResponse")
    public Response<SetScopesResponse> setScopesAsync(
        @WebParam(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopes);

    /**
     * This operation sets the scope parameters of a device. The scope parameters are used in the
     * 				device discovery to match a probe message.
     * 				This operation replaces all existing configurable scope parameters (not fixed parameters). If
     * 				this shall be avoided, one should use the scope add command instead. The device shall
     * 				support configuration of discovery scope parameters through the SetScopes command.
     * 
     * @param scopes
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetScopes", action = "http://www.onvif.org/ver10/device/wsdl/SetScopes")
    @RequestWrapper(localName = "SetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopes")
    @ResponseWrapper(localName = "SetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopesResponse")
    public Future<?> setScopesAsync(
        @WebParam(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopes,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetScopesResponse> asyncHandler);

    /**
     * This operation sets the scope parameters of a device. The scope parameters are used in the
     * 				device discovery to match a probe message.
     * 				This operation replaces all existing configurable scope parameters (not fixed parameters). If
     * 				this shall be avoided, one should use the scope add command instead. The device shall
     * 				support configuration of discovery scope parameters through the SetScopes command.
     * 
     * @param scopes
     */
    @WebMethod(operationName = "SetScopes", action = "http://www.onvif.org/ver10/device/wsdl/SetScopes")
    @RequestWrapper(localName = "SetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopes")
    @ResponseWrapper(localName = "SetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopesResponse")
    public void setScopes(
        @WebParam(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopes);

    /**
     * This operation adds new configurable scope parameters to a device. The scope parameters
     * 				are used in the device discovery to match a probe message. The device shall
     * 				support addition of discovery scope parameters through the AddScopes command.
     * 
     * @param scopeItem
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.AddScopesResponse>
     */
    @WebMethod(operationName = "AddScopes", action = "http://www.onvif.org/ver10/device/wsdl/AddScopes")
    @RequestWrapper(localName = "AddScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopes")
    @ResponseWrapper(localName = "AddScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopesResponse")
    public Response<AddScopesResponse> addScopesAsync(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopeItem);

    /**
     * This operation adds new configurable scope parameters to a device. The scope parameters
     * 				are used in the device discovery to match a probe message. The device shall
     * 				support addition of discovery scope parameters through the AddScopes command.
     * 
     * @param asyncHandler
     * @param scopeItem
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "AddScopes", action = "http://www.onvif.org/ver10/device/wsdl/AddScopes")
    @RequestWrapper(localName = "AddScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopes")
    @ResponseWrapper(localName = "AddScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopesResponse")
    public Future<?> addScopesAsync(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopeItem,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddScopesResponse> asyncHandler);

    /**
     * This operation adds new configurable scope parameters to a device. The scope parameters
     * 				are used in the device discovery to match a probe message. The device shall
     * 				support addition of discovery scope parameters through the AddScopes command.
     * 
     * @param scopeItem
     */
    @WebMethod(operationName = "AddScopes", action = "http://www.onvif.org/ver10/device/wsdl/AddScopes")
    @RequestWrapper(localName = "AddScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopes")
    @ResponseWrapper(localName = "AddScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopesResponse")
    public void addScopes(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopeItem);

    /**
     * This operation deletes scope-configurable scope parameters from a device. The scope
     * 				parameters are used in the device discovery to match a probe message, see Section 7. The
     * 				device shall support deletion of discovery scope parameters through the RemoveScopes
     * 				command.
     * 				Table
     * 
     * @param scopeItem
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.RemoveScopesResponse>
     */
    @WebMethod(operationName = "RemoveScopes", action = "http://www.onvif.org/ver10/device/wsdl/RemoveScopes")
    @RequestWrapper(localName = "RemoveScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopes")
    @ResponseWrapper(localName = "RemoveScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopesResponse")
    public Response<RemoveScopesResponse> removeScopesAsync(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopeItem);

    /**
     * This operation deletes scope-configurable scope parameters from a device. The scope
     * 				parameters are used in the device discovery to match a probe message, see Section 7. The
     * 				device shall support deletion of discovery scope parameters through the RemoveScopes
     * 				command.
     * 				Table
     * 
     * @param asyncHandler
     * @param scopeItem
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "RemoveScopes", action = "http://www.onvif.org/ver10/device/wsdl/RemoveScopes")
    @RequestWrapper(localName = "RemoveScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopes")
    @ResponseWrapper(localName = "RemoveScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopesResponse")
    public Future<?> removeScopesAsync(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> scopeItem,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemoveScopesResponse> asyncHandler);

    /**
     * This operation deletes scope-configurable scope parameters from a device. The scope
     * 				parameters are used in the device discovery to match a probe message, see Section 7. The
     * 				device shall support deletion of discovery scope parameters through the RemoveScopes
     * 				command.
     * 				Table
     * 
     * @param scopeItem
     */
    @WebMethod(operationName = "RemoveScopes", action = "http://www.onvif.org/ver10/device/wsdl/RemoveScopes")
    @RequestWrapper(localName = "RemoveScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopes")
    @ResponseWrapper(localName = "RemoveScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopesResponse")
    public void removeScopes(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.INOUT)
        Holder<List<String>> scopeItem);

    /**
     * This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
     * 				different device discovery modes. The device shall support retrieval of the discovery mode
     * 				setting through the GetDiscoveryMode command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDiscoveryModeResponse>
     */
    @WebMethod(operationName = "GetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode")
    @RequestWrapper(localName = "GetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryMode")
    @ResponseWrapper(localName = "GetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryModeResponse")
    public Response<GetDiscoveryModeResponse> getDiscoveryModeAsync();

    /**
     * This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
     * 				different device discovery modes. The device shall support retrieval of the discovery mode
     * 				setting through the GetDiscoveryMode command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode")
    @RequestWrapper(localName = "GetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryMode")
    @ResponseWrapper(localName = "GetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryModeResponse")
    public Future<?> getDiscoveryModeAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDiscoveryModeResponse> asyncHandler);

    /**
     * This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
     * 				different device discovery modes. The device shall support retrieval of the discovery mode
     * 				setting through the GetDiscoveryMode command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.DiscoveryMode
     */
    @WebMethod(operationName = "GetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode")
    @WebResult(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryMode")
    @ResponseWrapper(localName = "GetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryModeResponse")
    public DiscoveryMode getDiscoveryMode();

    /**
     * This operation sets the discovery mode operation of a device. See Section 7.2 for the
     * 				definition of the different device discovery modes. The device shall support configuration of
     * 				the discovery mode setting through the SetDiscoveryMode command.
     * 
     * @param discoveryMode
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetDiscoveryModeResponse>
     */
    @WebMethod(operationName = "SetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode")
    @RequestWrapper(localName = "SetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryMode")
    @ResponseWrapper(localName = "SetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryModeResponse")
    public Response<SetDiscoveryModeResponse> setDiscoveryModeAsync(
        @WebParam(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode discoveryMode);

    /**
     * This operation sets the discovery mode operation of a device. See Section 7.2 for the
     * 				definition of the different device discovery modes. The device shall support configuration of
     * 				the discovery mode setting through the SetDiscoveryMode command.
     * 
     * @param asyncHandler
     * @param discoveryMode
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode")
    @RequestWrapper(localName = "SetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryMode")
    @ResponseWrapper(localName = "SetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryModeResponse")
    public Future<?> setDiscoveryModeAsync(
        @WebParam(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode discoveryMode,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetDiscoveryModeResponse> asyncHandler);

    /**
     * This operation sets the discovery mode operation of a device. See Section 7.2 for the
     * 				definition of the different device discovery modes. The device shall support configuration of
     * 				the discovery mode setting through the SetDiscoveryMode command.
     * 
     * @param discoveryMode
     */
    @WebMethod(operationName = "SetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode")
    @RequestWrapper(localName = "SetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryMode")
    @ResponseWrapper(localName = "SetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryModeResponse")
    public void setDiscoveryMode(
        @WebParam(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode discoveryMode);

    /**
     * This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
     * 				of remote discovery extensions. A device that supports remote discovery shall support
     * 				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
     * 				command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetRemoteDiscoveryModeResponse>
     */
    @WebMethod(operationName = "GetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode")
    @RequestWrapper(localName = "GetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "GetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryModeResponse")
    public Response<GetRemoteDiscoveryModeResponse> getRemoteDiscoveryModeAsync();

    /**
     * This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
     * 				of remote discovery extensions. A device that supports remote discovery shall support
     * 				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
     * 				command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode")
    @RequestWrapper(localName = "GetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "GetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryModeResponse")
    public Future<?> getRemoteDiscoveryModeAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRemoteDiscoveryModeResponse> asyncHandler);

    /**
     * This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
     * 				of remote discovery extensions. A device that supports remote discovery shall support
     * 				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
     * 				command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.DiscoveryMode
     */
    @WebMethod(operationName = "GetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode")
    @WebResult(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "GetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryModeResponse")
    public DiscoveryMode getRemoteDiscoveryMode();

    /**
     * This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
     * 				the definition of remote discovery remote extensions. A device that supports remote discovery
     * 				shall support configuration of the discovery mode setting through the
     * 				SetRemoteDiscoveryMode command.
     * 
     * @param remoteDiscoveryMode
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetRemoteDiscoveryModeResponse>
     */
    @WebMethod(operationName = "SetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode")
    @RequestWrapper(localName = "SetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "SetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryModeResponse")
    public Response<SetRemoteDiscoveryModeResponse> setRemoteDiscoveryModeAsync(
        @WebParam(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode remoteDiscoveryMode);

    /**
     * This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
     * 				the definition of remote discovery remote extensions. A device that supports remote discovery
     * 				shall support configuration of the discovery mode setting through the
     * 				SetRemoteDiscoveryMode command.
     * 
     * @param asyncHandler
     * @param remoteDiscoveryMode
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode")
    @RequestWrapper(localName = "SetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "SetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryModeResponse")
    public Future<?> setRemoteDiscoveryModeAsync(
        @WebParam(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode remoteDiscoveryMode,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetRemoteDiscoveryModeResponse> asyncHandler);

    /**
     * This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
     * 				the definition of remote discovery remote extensions. A device that supports remote discovery
     * 				shall support configuration of the discovery mode setting through the
     * 				SetRemoteDiscoveryMode command.
     * 
     * @param remoteDiscoveryMode
     */
    @WebMethod(operationName = "SetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode")
    @RequestWrapper(localName = "SetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "SetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryModeResponse")
    public void setRemoteDiscoveryMode(
        @WebParam(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DiscoveryMode remoteDiscoveryMode);

    /**
     * This operation gets the remote DP address or addresses from a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
     * 				DP address(es) through the GetDPAddresses command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDPAddressesResponse>
     */
    @WebMethod(operationName = "GetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses")
    @RequestWrapper(localName = "GetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddresses")
    @ResponseWrapper(localName = "GetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddressesResponse")
    public Response<GetDPAddressesResponse> getDPAddressesAsync();

    /**
     * This operation gets the remote DP address or addresses from a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
     * 				DP address(es) through the GetDPAddresses command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses")
    @RequestWrapper(localName = "GetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddresses")
    @ResponseWrapper(localName = "GetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddressesResponse")
    public Future<?> getDPAddressesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDPAddressesResponse> asyncHandler);

    /**
     * This operation gets the remote DP address or addresses from a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
     * 				DP address(es) through the GetDPAddresses command.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.NetworkHost>
     */
    @WebMethod(operationName = "GetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses")
    @WebResult(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddresses")
    @ResponseWrapper(localName = "GetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddressesResponse")
    public List<NetworkHost> getDPAddresses();

    /**
     * A client can ask for the device service endpoint reference address property that can be used
     * 				to derive the password equivalent for remote user operation. The device shall support the
     * 				GetEndpointReference command returning the address property of the device service
     * 				endpoint reference.
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetEndpointReferenceResponse>
     */
    @WebMethod(operationName = "GetEndpointReference", action = "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Response<GetEndpointReferenceResponse> getEndpointReferenceAsync(
        @WebParam(name = "GetEndpointReference", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetEndpointReference parameters);

    /**
     * A client can ask for the device service endpoint reference address property that can be used
     * 				to derive the password equivalent for remote user operation. The device shall support the
     * 				GetEndpointReference command returning the address property of the device service
     * 				endpoint reference.
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetEndpointReference", action = "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Future<?> getEndpointReferenceAsync(
        @WebParam(name = "GetEndpointReference", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetEndpointReference parameters,
        @WebParam(name = "GetEndpointReferenceResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetEndpointReferenceResponse> asyncHandler);

    /**
     * A client can ask for the device service endpoint reference address property that can be used
     * 				to derive the password equivalent for remote user operation. The device shall support the
     * 				GetEndpointReference command returning the address property of the device service
     * 				endpoint reference.
     * 
     * @param parameters
     * @return
     *     returns org.onvif.ver10.device.wsdl.GetEndpointReferenceResponse
     */
    @WebMethod(operationName = "GetEndpointReference", action = "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference")
    @WebResult(name = "GetEndpointReferenceResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetEndpointReferenceResponse getEndpointReference(
        @WebParam(name = "GetEndpointReference", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetEndpointReference parameters);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetRemoteUserResponse>
     */
    @WebMethod(operationName = "GetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser")
    @RequestWrapper(localName = "GetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUser")
    @ResponseWrapper(localName = "GetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUserResponse")
    public Response<GetRemoteUserResponse> getRemoteUserAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser")
    @RequestWrapper(localName = "GetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUser")
    @ResponseWrapper(localName = "GetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUserResponse")
    public Future<?> getRemoteUserAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRemoteUserResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns org.onvif.ver10.schema.RemoteUser
     */
    @WebMethod(operationName = "GetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser")
    @WebResult(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUser")
    @ResponseWrapper(localName = "GetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUserResponse")
    public RemoteUser getRemoteUser();

    /**
     * 
     * @param remoteUser
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetRemoteUserResponse>
     */
    @WebMethod(operationName = "SetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser")
    @RequestWrapper(localName = "SetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUser")
    @ResponseWrapper(localName = "SetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUserResponse")
    public Response<SetRemoteUserResponse> setRemoteUserAsync(
        @WebParam(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RemoteUser remoteUser);

    /**
     * 
     * @param asyncHandler
     * @param remoteUser
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser")
    @RequestWrapper(localName = "SetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUser")
    @ResponseWrapper(localName = "SetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUserResponse")
    public Future<?> setRemoteUserAsync(
        @WebParam(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RemoteUser remoteUser,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetRemoteUserResponse> asyncHandler);

    /**
     * 
     * @param remoteUser
     */
    @WebMethod(operationName = "SetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser")
    @RequestWrapper(localName = "SetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUser")
    @ResponseWrapper(localName = "SetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUserResponse")
    public void setRemoteUser(
        @WebParam(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RemoteUser remoteUser);

    /**
     * This operation lists the registered users and corresponding credentials on a device. The
     * 				device shall support retrieval of registered device users and their credentials for the user
     * 				token through the GetUsers command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetUsersResponse>
     */
    @WebMethod(operationName = "GetUsers", action = "http://www.onvif.org/ver10/device/wsdl/GetUsers")
    @RequestWrapper(localName = "GetUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsers")
    @ResponseWrapper(localName = "GetUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsersResponse")
    public Response<GetUsersResponse> getUsersAsync();

    /**
     * This operation lists the registered users and corresponding credentials on a device. The
     * 				device shall support retrieval of registered device users and their credentials for the user
     * 				token through the GetUsers command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetUsers", action = "http://www.onvif.org/ver10/device/wsdl/GetUsers")
    @RequestWrapper(localName = "GetUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsers")
    @ResponseWrapper(localName = "GetUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsersResponse")
    public Future<?> getUsersAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUsersResponse> asyncHandler);

    /**
     * This operation lists the registered users and corresponding credentials on a device. The
     * 				device shall support retrieval of registered device users and their credentials for the user
     * 				token through the GetUsers command.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.User>
     */
    @WebMethod(operationName = "GetUsers", action = "http://www.onvif.org/ver10/device/wsdl/GetUsers")
    @WebResult(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsers")
    @ResponseWrapper(localName = "GetUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsersResponse")
    public List<User> getUsers();

    /**
     * 
     * @param user
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.CreateUsersResponse>
     */
    @WebMethod(operationName = "CreateUsers", action = "http://www.onvif.org/ver10/device/wsdl/CreateUsers")
    @RequestWrapper(localName = "CreateUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsers")
    @ResponseWrapper(localName = "CreateUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsersResponse")
    public Response<CreateUsersResponse> createUsersAsync(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user);

    /**
     * 
     * @param asyncHandler
     * @param user
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "CreateUsers", action = "http://www.onvif.org/ver10/device/wsdl/CreateUsers")
    @RequestWrapper(localName = "CreateUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsers")
    @ResponseWrapper(localName = "CreateUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsersResponse")
    public Future<?> createUsersAsync(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateUsersResponse> asyncHandler);

    /**
     * 
     * @param user
     */
    @WebMethod(operationName = "CreateUsers", action = "http://www.onvif.org/ver10/device/wsdl/CreateUsers")
    @RequestWrapper(localName = "CreateUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsers")
    @ResponseWrapper(localName = "CreateUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsersResponse")
    public void createUsers(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user);

    /**
     * This operation deletes users on a device. The device shall support deletion of device users and their credentials 
     * 				through the DeleteUsers command. A device may have one or more fixed users
     * 				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
     * 				fault message shall be returned and no users be deleted.
     * 
     * @param username
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.DeleteUsersResponse>
     */
    @WebMethod(operationName = "DeleteUsers", action = "http://www.onvif.org/ver10/device/wsdl/DeleteUsers")
    @RequestWrapper(localName = "DeleteUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsers")
    @ResponseWrapper(localName = "DeleteUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsersResponse")
    public Response<DeleteUsersResponse> deleteUsersAsync(
        @WebParam(name = "Username", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> username);

    /**
     * This operation deletes users on a device. The device shall support deletion of device users and their credentials 
     * 				through the DeleteUsers command. A device may have one or more fixed users
     * 				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
     * 				fault message shall be returned and no users be deleted.
     * 
     * @param username
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DeleteUsers", action = "http://www.onvif.org/ver10/device/wsdl/DeleteUsers")
    @RequestWrapper(localName = "DeleteUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsers")
    @ResponseWrapper(localName = "DeleteUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsersResponse")
    public Future<?> deleteUsersAsync(
        @WebParam(name = "Username", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> username,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteUsersResponse> asyncHandler);

    /**
     * This operation deletes users on a device. The device shall support deletion of device users and their credentials 
     * 				through the DeleteUsers command. A device may have one or more fixed users
     * 				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
     * 				fault message shall be returned and no users be deleted.
     * 
     * @param username
     */
    @WebMethod(operationName = "DeleteUsers", action = "http://www.onvif.org/ver10/device/wsdl/DeleteUsers")
    @RequestWrapper(localName = "DeleteUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsers")
    @ResponseWrapper(localName = "DeleteUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsersResponse")
    public void deleteUsers(
        @WebParam(name = "Username", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> username);

    /**
     * This operation updates the settings for one or several users on a device for authentication purposes.
     * 				The device shall support update of device users and their credentials through the SetUser command. 
     * 				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
     * 
     * @param user
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetUserResponse>
     */
    @WebMethod(operationName = "SetUser", action = "http://www.onvif.org/ver10/device/wsdl/SetUser")
    @RequestWrapper(localName = "SetUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUser")
    @ResponseWrapper(localName = "SetUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUserResponse")
    public Response<SetUserResponse> setUserAsync(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user);

    /**
     * This operation updates the settings for one or several users on a device for authentication purposes.
     * 				The device shall support update of device users and their credentials through the SetUser command. 
     * 				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
     * 
     * @param asyncHandler
     * @param user
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetUser", action = "http://www.onvif.org/ver10/device/wsdl/SetUser")
    @RequestWrapper(localName = "SetUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUser")
    @ResponseWrapper(localName = "SetUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUserResponse")
    public Future<?> setUserAsync(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetUserResponse> asyncHandler);

    /**
     * This operation updates the settings for one or several users on a device for authentication purposes.
     * 				The device shall support update of device users and their credentials through the SetUser command. 
     * 				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
     * 
     * @param user
     */
    @WebMethod(operationName = "SetUser", action = "http://www.onvif.org/ver10/device/wsdl/SetUser")
    @RequestWrapper(localName = "SetUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUser")
    @ResponseWrapper(localName = "SetUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUserResponse")
    public void setUser(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<User> user);

    /**
     * It is possible for an endpoint to request a URL that can be used to retrieve the complete
     * 				schema and WSDL definitions of a device. The command gives in return a URL entry point
     * 				where all the necessary product specific WSDL and schema definitions can be retrieved. The
     * 				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetWsdlUrlResponse>
     */
    @WebMethod(operationName = "GetWsdlUrl", action = "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl")
    @RequestWrapper(localName = "GetWsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrl")
    @ResponseWrapper(localName = "GetWsdlUrlResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrlResponse")
    public Response<GetWsdlUrlResponse> getWsdlUrlAsync();

    /**
     * It is possible for an endpoint to request a URL that can be used to retrieve the complete
     * 				schema and WSDL definitions of a device. The command gives in return a URL entry point
     * 				where all the necessary product specific WSDL and schema definitions can be retrieved. The
     * 				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetWsdlUrl", action = "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl")
    @RequestWrapper(localName = "GetWsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrl")
    @ResponseWrapper(localName = "GetWsdlUrlResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrlResponse")
    public Future<?> getWsdlUrlAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetWsdlUrlResponse> asyncHandler);

    /**
     * It is possible for an endpoint to request a URL that can be used to retrieve the complete
     * 				schema and WSDL definitions of a device. The command gives in return a URL entry point
     * 				where all the necessary product specific WSDL and schema definitions can be retrieved. The
     * 				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetWsdlUrl", action = "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl")
    @WebResult(name = "WsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetWsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrl")
    @ResponseWrapper(localName = "GetWsdlUrlResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrlResponse")
    public String getWsdlUrl();

    /**
     * This method has been replaced by the more generic GetServices method.
     * 			 For capabilities of individual services refer to the GetServiceCapabilities methods.
     * 
     * @param category
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetCapabilitiesResponse>
     */
    @WebMethod(operationName = "GetCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetCapabilities")
    @RequestWrapper(localName = "GetCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilities")
    @ResponseWrapper(localName = "GetCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilitiesResponse")
    public Response<GetCapabilitiesResponse> getCapabilitiesAsync(
        @WebParam(name = "Category", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CapabilityCategory> category);

    /**
     * This method has been replaced by the more generic GetServices method.
     * 			 For capabilities of individual services refer to the GetServiceCapabilities methods.
     * 
     * @param category
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetCapabilities")
    @RequestWrapper(localName = "GetCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilities")
    @ResponseWrapper(localName = "GetCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilitiesResponse")
    public Future<?> getCapabilitiesAsync(
        @WebParam(name = "Category", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CapabilityCategory> category,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCapabilitiesResponse> asyncHandler);

    /**
     * This method has been replaced by the more generic GetServices method.
     * 			 For capabilities of individual services refer to the GetServiceCapabilities methods.
     * 
     * @param category
     * @return
     *     returns org.onvif.ver10.schema.Capabilities
     */
    @WebMethod(operationName = "GetCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetCapabilities")
    @WebResult(name = "Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilities")
    @ResponseWrapper(localName = "GetCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilitiesResponse")
    public Capabilities getCapabilities(
        @WebParam(name = "Category", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CapabilityCategory> category);

    /**
     * This operation sets the remote DP address or addresses on a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support configuration of the
     * 				remote DP address(es) through the SetDPAddresses command.
     * 
     * @param dpAddress
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetDPAddressesResponse>
     */
    @WebMethod(operationName = "SetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses")
    @RequestWrapper(localName = "SetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddresses")
    @ResponseWrapper(localName = "SetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddressesResponse")
    public Response<SetDPAddressesResponse> setDPAddressesAsync(
        @WebParam(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> dpAddress);

    /**
     * This operation sets the remote DP address or addresses on a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support configuration of the
     * 				remote DP address(es) through the SetDPAddresses command.
     * 
     * @param asyncHandler
     * @param dpAddress
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses")
    @RequestWrapper(localName = "SetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddresses")
    @ResponseWrapper(localName = "SetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddressesResponse")
    public Future<?> setDPAddressesAsync(
        @WebParam(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> dpAddress,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetDPAddressesResponse> asyncHandler);

    /**
     * This operation sets the remote DP address or addresses on a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support configuration of the
     * 				remote DP address(es) through the SetDPAddresses command.
     * 
     * @param dpAddress
     */
    @WebMethod(operationName = "SetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses")
    @RequestWrapper(localName = "SetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddresses")
    @ResponseWrapper(localName = "SetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddressesResponse")
    public void setDPAddresses(
        @WebParam(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> dpAddress);

    /**
     * This operation is used by an endpoint to get the hostname from a device. The device shall
     * 				return its hostname configurations through the GetHostname command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetHostnameResponse>
     */
    @WebMethod(operationName = "GetHostname", action = "http://www.onvif.org/ver10/device/wsdl/GetHostname")
    @RequestWrapper(localName = "GetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostname")
    @ResponseWrapper(localName = "GetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostnameResponse")
    public Response<GetHostnameResponse> getHostnameAsync();

    /**
     * This operation is used by an endpoint to get the hostname from a device. The device shall
     * 				return its hostname configurations through the GetHostname command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetHostname", action = "http://www.onvif.org/ver10/device/wsdl/GetHostname")
    @RequestWrapper(localName = "GetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostname")
    @ResponseWrapper(localName = "GetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostnameResponse")
    public Future<?> getHostnameAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetHostnameResponse> asyncHandler);

    /**
     * This operation is used by an endpoint to get the hostname from a device. The device shall
     * 				return its hostname configurations through the GetHostname command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.HostnameInformation
     */
    @WebMethod(operationName = "GetHostname", action = "http://www.onvif.org/ver10/device/wsdl/GetHostname")
    @WebResult(name = "HostnameInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostname")
    @ResponseWrapper(localName = "GetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostnameResponse")
    public HostnameInformation getHostname();

    /**
     * 
     * @param name
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetHostnameResponse>
     */
    @WebMethod(operationName = "SetHostname", action = "http://www.onvif.org/ver10/device/wsdl/SetHostname")
    @RequestWrapper(localName = "SetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostname")
    @ResponseWrapper(localName = "SetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameResponse")
    public Response<SetHostnameResponse> setHostnameAsync(
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name);

    /**
     * 
     * @param name
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetHostname", action = "http://www.onvif.org/ver10/device/wsdl/SetHostname")
    @RequestWrapper(localName = "SetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostname")
    @ResponseWrapper(localName = "SetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameResponse")
    public Future<?> setHostnameAsync(
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetHostnameResponse> asyncHandler);

    /**
     * 
     * @param name
     */
    @WebMethod(operationName = "SetHostname", action = "http://www.onvif.org/ver10/device/wsdl/SetHostname")
    @RequestWrapper(localName = "SetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostname")
    @ResponseWrapper(localName = "SetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameResponse")
    public void setHostname(
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name);

    /**
     * This operation controls whether the hostname is set manually or retrieved via DHCP.
     * 
     * @param fromDHCP
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetHostnameFromDHCPResponse>
     */
    @WebMethod(operationName = "SetHostnameFromDHCP", action = "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP")
    @RequestWrapper(localName = "SetHostnameFromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCP")
    @ResponseWrapper(localName = "SetHostnameFromDHCPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCPResponse")
    public Response<SetHostnameFromDHCPResponse> setHostnameFromDHCPAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP);

    /**
     * This operation controls whether the hostname is set manually or retrieved via DHCP.
     * 
     * @param asyncHandler
     * @param fromDHCP
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetHostnameFromDHCP", action = "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP")
    @RequestWrapper(localName = "SetHostnameFromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCP")
    @ResponseWrapper(localName = "SetHostnameFromDHCPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCPResponse")
    public Future<?> setHostnameFromDHCPAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetHostnameFromDHCPResponse> asyncHandler);

    /**
     * This operation controls whether the hostname is set manually or retrieved via DHCP.
     * 
     * @param fromDHCP
     * @return
     *     returns boolean
     */
    @WebMethod(operationName = "SetHostnameFromDHCP", action = "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP")
    @WebResult(name = "RebootNeeded", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SetHostnameFromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCP")
    @ResponseWrapper(localName = "SetHostnameFromDHCPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCPResponse")
    public boolean setHostnameFromDHCP(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP);

    /**
     * This operation gets the DNS settings from a device. The device shall return its DNS
     * 				configurations through the GetDNS command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDNSResponse>
     */
    @WebMethod(operationName = "GetDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDNS")
    @RequestWrapper(localName = "GetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNS")
    @ResponseWrapper(localName = "GetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNSResponse")
    public Response<GetDNSResponse> getDNSAsync();

    /**
     * This operation gets the DNS settings from a device. The device shall return its DNS
     * 				configurations through the GetDNS command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDNS")
    @RequestWrapper(localName = "GetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNS")
    @ResponseWrapper(localName = "GetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNSResponse")
    public Future<?> getDNSAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDNSResponse> asyncHandler);

    /**
     * This operation gets the DNS settings from a device. The device shall return its DNS
     * 				configurations through the GetDNS command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.DNSInformation
     */
    @WebMethod(operationName = "GetDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDNS")
    @WebResult(name = "DNSInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNS")
    @ResponseWrapper(localName = "GetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNSResponse")
    public DNSInformation getDNS();

    /**
     * This operation sets the DNS settings on a device. It shall be possible to set the device DNS
     * 				configurations through the SetDNS command.
     * 
     * @param searchDomain
     * @param fromDHCP
     * @param dnsManual
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetDNSResponse>
     */
    @WebMethod(operationName = "SetDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDNS")
    @RequestWrapper(localName = "SetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNS")
    @ResponseWrapper(localName = "SetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNSResponse")
    public Response<SetDNSResponse> setDNSAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "SearchDomain", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> searchDomain,
        @WebParam(name = "DNSManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<IPAddress> dnsManual);

    /**
     * This operation sets the DNS settings on a device. It shall be possible to set the device DNS
     * 				configurations through the SetDNS command.
     * 
     * @param searchDomain
     * @param asyncHandler
     * @param fromDHCP
     * @param dnsManual
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDNS")
    @RequestWrapper(localName = "SetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNS")
    @ResponseWrapper(localName = "SetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNSResponse")
    public Future<?> setDNSAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "SearchDomain", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> searchDomain,
        @WebParam(name = "DNSManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<IPAddress> dnsManual,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetDNSResponse> asyncHandler);

    /**
     * This operation sets the DNS settings on a device. It shall be possible to set the device DNS
     * 				configurations through the SetDNS command.
     * 
     * @param searchDomain
     * @param fromDHCP
     * @param dnsManual
     */
    @WebMethod(operationName = "SetDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDNS")
    @RequestWrapper(localName = "SetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNS")
    @ResponseWrapper(localName = "SetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNSResponse")
    public void setDNS(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "SearchDomain", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> searchDomain,
        @WebParam(name = "DNSManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<IPAddress> dnsManual);

    /**
     * This operation gets the NTP settings from a device. If the device supports NTP, it shall be
     * 				possible to get the NTP server settings through the GetNTP command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetNTPResponse>
     */
    @WebMethod(operationName = "GetNTP", action = "http://www.onvif.org/ver10/device/wsdl/GetNTP")
    @RequestWrapper(localName = "GetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTP")
    @ResponseWrapper(localName = "GetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTPResponse")
    public Response<GetNTPResponse> getNTPAsync();

    /**
     * This operation gets the NTP settings from a device. If the device supports NTP, it shall be
     * 				possible to get the NTP server settings through the GetNTP command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetNTP", action = "http://www.onvif.org/ver10/device/wsdl/GetNTP")
    @RequestWrapper(localName = "GetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTP")
    @ResponseWrapper(localName = "GetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTPResponse")
    public Future<?> getNTPAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetNTPResponse> asyncHandler);

    /**
     * This operation gets the NTP settings from a device. If the device supports NTP, it shall be
     * 				possible to get the NTP server settings through the GetNTP command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.NTPInformation
     */
    @WebMethod(operationName = "GetNTP", action = "http://www.onvif.org/ver10/device/wsdl/GetNTP")
    @WebResult(name = "NTPInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTP")
    @ResponseWrapper(localName = "GetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTPResponse")
    public NTPInformation getNTP();

    /**
     * 
     * @param fromDHCP
     * @param ntpManual
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetNTPResponse>
     */
    @WebMethod(operationName = "SetNTP", action = "http://www.onvif.org/ver10/device/wsdl/SetNTP")
    @RequestWrapper(localName = "SetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTP")
    @ResponseWrapper(localName = "SetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTPResponse")
    public Response<SetNTPResponse> setNTPAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "NTPManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> ntpManual);

    /**
     * 
     * @param asyncHandler
     * @param fromDHCP
     * @param ntpManual
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetNTP", action = "http://www.onvif.org/ver10/device/wsdl/SetNTP")
    @RequestWrapper(localName = "SetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTP")
    @ResponseWrapper(localName = "SetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTPResponse")
    public Future<?> setNTPAsync(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "NTPManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> ntpManual,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetNTPResponse> asyncHandler);

    /**
     * 
     * @param fromDHCP
     * @param ntpManual
     */
    @WebMethod(operationName = "SetNTP", action = "http://www.onvif.org/ver10/device/wsdl/SetNTP")
    @RequestWrapper(localName = "SetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTP")
    @ResponseWrapper(localName = "SetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTPResponse")
    public void setNTP(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "NTPManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkHost> ntpManual);

    /**
     * This operation gets the dynamic DNS settings from a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
     * 				and TTL through the GetDynamicDNS command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDynamicDNSResponse>
     */
    @WebMethod(operationName = "GetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS")
    @RequestWrapper(localName = "GetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNS")
    @ResponseWrapper(localName = "GetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNSResponse")
    public Response<GetDynamicDNSResponse> getDynamicDNSAsync();

    /**
     * This operation gets the dynamic DNS settings from a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
     * 				and TTL through the GetDynamicDNS command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS")
    @RequestWrapper(localName = "GetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNS")
    @ResponseWrapper(localName = "GetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNSResponse")
    public Future<?> getDynamicDNSAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDynamicDNSResponse> asyncHandler);

    /**
     * This operation gets the dynamic DNS settings from a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
     * 				and TTL through the GetDynamicDNS command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.DynamicDNSInformation
     */
    @WebMethod(operationName = "GetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS")
    @WebResult(name = "DynamicDNSInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNS")
    @ResponseWrapper(localName = "GetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNSResponse")
    public DynamicDNSInformation getDynamicDNS();

    /**
     * This operation sets the dynamic DNS settings on a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
     * 				and TTL through the SetDynamicDNS command.
     * 
     * @param name
     * @param ttl
     * @param type
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetDynamicDNSResponse>
     */
    @WebMethod(operationName = "SetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS")
    @RequestWrapper(localName = "SetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNS")
    @ResponseWrapper(localName = "SetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNSResponse")
    public Response<SetDynamicDNSResponse> setDynamicDNSAsync(
        @WebParam(name = "Type", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DynamicDNSType type,
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name,
        @WebParam(name = "TTL", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Duration ttl);

    /**
     * This operation sets the dynamic DNS settings on a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
     * 				and TTL through the SetDynamicDNS command.
     * 
     * @param name
     * @param asyncHandler
     * @param ttl
     * @param type
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS")
    @RequestWrapper(localName = "SetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNS")
    @ResponseWrapper(localName = "SetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNSResponse")
    public Future<?> setDynamicDNSAsync(
        @WebParam(name = "Type", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DynamicDNSType type,
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name,
        @WebParam(name = "TTL", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Duration ttl,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetDynamicDNSResponse> asyncHandler);

    /**
     * This operation sets the dynamic DNS settings on a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
     * 				and TTL through the SetDynamicDNS command.
     * 
     * @param name
     * @param ttl
     * @param type
     */
    @WebMethod(operationName = "SetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS")
    @RequestWrapper(localName = "SetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNS")
    @ResponseWrapper(localName = "SetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNSResponse")
    public void setDynamicDNS(
        @WebParam(name = "Type", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        DynamicDNSType type,
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String name,
        @WebParam(name = "TTL", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Duration ttl);

    /**
     * This operation gets the network interface configuration from a device. The device shall
     * 				support return of network interface configuration settings as defined by the NetworkInterface
     * 				type through the GetNetworkInterfaces command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetNetworkInterfacesResponse>
     */
    @WebMethod(operationName = "GetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces")
    @RequestWrapper(localName = "GetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfaces")
    @ResponseWrapper(localName = "GetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfacesResponse")
    public Response<GetNetworkInterfacesResponse> getNetworkInterfacesAsync();

    /**
     * This operation gets the network interface configuration from a device. The device shall
     * 				support return of network interface configuration settings as defined by the NetworkInterface
     * 				type through the GetNetworkInterfaces command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces")
    @RequestWrapper(localName = "GetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfaces")
    @ResponseWrapper(localName = "GetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfacesResponse")
    public Future<?> getNetworkInterfacesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetNetworkInterfacesResponse> asyncHandler);

    /**
     * This operation gets the network interface configuration from a device. The device shall
     * 				support return of network interface configuration settings as defined by the NetworkInterface
     * 				type through the GetNetworkInterfaces command.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.NetworkInterface>
     */
    @WebMethod(operationName = "GetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces")
    @WebResult(name = "NetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfaces")
    @ResponseWrapper(localName = "GetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfacesResponse")
    public List<NetworkInterface> getNetworkInterfaces();

    /**
     * 
     * @param networkInterface
     * @param interfaceToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetNetworkInterfacesResponse>
     */
    @WebMethod(operationName = "SetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces")
    @RequestWrapper(localName = "SetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfaces")
    @ResponseWrapper(localName = "SetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfacesResponse")
    public Response<SetNetworkInterfacesResponse> setNetworkInterfacesAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "NetworkInterface", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        NetworkInterfaceSetConfiguration networkInterface);

    /**
     * 
     * @param networkInterface
     * @param interfaceToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces")
    @RequestWrapper(localName = "SetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfaces")
    @ResponseWrapper(localName = "SetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfacesResponse")
    public Future<?> setNetworkInterfacesAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "NetworkInterface", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        NetworkInterfaceSetConfiguration networkInterface,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetNetworkInterfacesResponse> asyncHandler);

    /**
     * 
     * @param networkInterface
     * @param interfaceToken
     * @return
     *     returns boolean
     */
    @WebMethod(operationName = "SetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces")
    @WebResult(name = "RebootNeeded", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfaces")
    @ResponseWrapper(localName = "SetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfacesResponse")
    public boolean setNetworkInterfaces(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "NetworkInterface", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        NetworkInterfaceSetConfiguration networkInterface);

    /**
     * This operation gets defined network protocols from a device. The device shall support the
     * 				GetNetworkProtocols command returning configured network protocols.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetNetworkProtocolsResponse>
     */
    @WebMethod(operationName = "GetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols")
    @RequestWrapper(localName = "GetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocols")
    @ResponseWrapper(localName = "GetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocolsResponse")
    public Response<GetNetworkProtocolsResponse> getNetworkProtocolsAsync();

    /**
     * This operation gets defined network protocols from a device. The device shall support the
     * 				GetNetworkProtocols command returning configured network protocols.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols")
    @RequestWrapper(localName = "GetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocols")
    @ResponseWrapper(localName = "GetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocolsResponse")
    public Future<?> getNetworkProtocolsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetNetworkProtocolsResponse> asyncHandler);

    /**
     * This operation gets defined network protocols from a device. The device shall support the
     * 				GetNetworkProtocols command returning configured network protocols.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.NetworkProtocol>
     */
    @WebMethod(operationName = "GetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols")
    @WebResult(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocols")
    @ResponseWrapper(localName = "GetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocolsResponse")
    public List<NetworkProtocol> getNetworkProtocols();

    /**
     * This operation configures defined network protocols on a device. The device shall support
     * 				configuration of defined network protocols through the SetNetworkProtocols command.
     * 
     * @param networkProtocols
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetNetworkProtocolsResponse>
     */
    @WebMethod(operationName = "SetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols")
    @RequestWrapper(localName = "SetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocols")
    @ResponseWrapper(localName = "SetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocolsResponse")
    public Response<SetNetworkProtocolsResponse> setNetworkProtocolsAsync(
        @WebParam(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkProtocol> networkProtocols);

    /**
     * This operation configures defined network protocols on a device. The device shall support
     * 				configuration of defined network protocols through the SetNetworkProtocols command.
     * 
     * @param asyncHandler
     * @param networkProtocols
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols")
    @RequestWrapper(localName = "SetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocols")
    @ResponseWrapper(localName = "SetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocolsResponse")
    public Future<?> setNetworkProtocolsAsync(
        @WebParam(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkProtocol> networkProtocols,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetNetworkProtocolsResponse> asyncHandler);

    /**
     * This operation configures defined network protocols on a device. The device shall support
     * 				configuration of defined network protocols through the SetNetworkProtocols command.
     * 
     * @param networkProtocols
     */
    @WebMethod(operationName = "SetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols")
    @RequestWrapper(localName = "SetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocols")
    @ResponseWrapper(localName = "SetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocolsResponse")
    public void setNetworkProtocols(
        @WebParam(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<NetworkProtocol> networkProtocols);

    /**
     * This operation gets the default gateway settings from a device. The device shall support the
     * 				GetNetworkDefaultGateway command returning configured default gateway address(es).
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetNetworkDefaultGatewayResponse>
     */
    @WebMethod(operationName = "GetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway")
    @RequestWrapper(localName = "GetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGateway")
    @ResponseWrapper(localName = "GetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGatewayResponse")
    public Response<GetNetworkDefaultGatewayResponse> getNetworkDefaultGatewayAsync();

    /**
     * This operation gets the default gateway settings from a device. The device shall support the
     * 				GetNetworkDefaultGateway command returning configured default gateway address(es).
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway")
    @RequestWrapper(localName = "GetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGateway")
    @ResponseWrapper(localName = "GetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGatewayResponse")
    public Future<?> getNetworkDefaultGatewayAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetNetworkDefaultGatewayResponse> asyncHandler);

    /**
     * This operation gets the default gateway settings from a device. The device shall support the
     * 				GetNetworkDefaultGateway command returning configured default gateway address(es).
     * 
     * @return
     *     returns org.onvif.ver10.schema.NetworkGateway
     */
    @WebMethod(operationName = "GetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway")
    @WebResult(name = "NetworkGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGateway")
    @ResponseWrapper(localName = "GetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGatewayResponse")
    public NetworkGateway getNetworkDefaultGateway();

    /**
     * This operation sets the default gateway settings on a device. The device shall support
     * 				configuration of default gateway through the SetNetworkDefaultGateway command.
     * 
     * @param iPv6Address
     * @param iPv4Address
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetNetworkDefaultGatewayResponse>
     */
    @WebMethod(operationName = "SetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway")
    @RequestWrapper(localName = "SetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGateway")
    @ResponseWrapper(localName = "SetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGatewayResponse")
    public Response<SetNetworkDefaultGatewayResponse> setNetworkDefaultGatewayAsync(
        @WebParam(name = "IPv4Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv4Address,
        @WebParam(name = "IPv6Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv6Address);

    /**
     * This operation sets the default gateway settings on a device. The device shall support
     * 				configuration of default gateway through the SetNetworkDefaultGateway command.
     * 
     * @param iPv6Address
     * @param asyncHandler
     * @param iPv4Address
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway")
    @RequestWrapper(localName = "SetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGateway")
    @ResponseWrapper(localName = "SetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGatewayResponse")
    public Future<?> setNetworkDefaultGatewayAsync(
        @WebParam(name = "IPv4Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv4Address,
        @WebParam(name = "IPv6Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv6Address,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetNetworkDefaultGatewayResponse> asyncHandler);

    /**
     * This operation sets the default gateway settings on a device. The device shall support
     * 				configuration of default gateway through the SetNetworkDefaultGateway command.
     * 
     * @param iPv6Address
     * @param iPv4Address
     */
    @WebMethod(operationName = "SetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway")
    @RequestWrapper(localName = "SetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGateway")
    @ResponseWrapper(localName = "SetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGatewayResponse")
    public void setNetworkDefaultGateway(
        @WebParam(name = "IPv4Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv4Address,
        @WebParam(name = "IPv6Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> iPv6Address);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetZeroConfigurationResponse>
     */
    @WebMethod(operationName = "GetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration")
    @RequestWrapper(localName = "GetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfiguration")
    @ResponseWrapper(localName = "GetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfigurationResponse")
    public Response<GetZeroConfigurationResponse> getZeroConfigurationAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration")
    @RequestWrapper(localName = "GetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfiguration")
    @ResponseWrapper(localName = "GetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfigurationResponse")
    public Future<?> getZeroConfigurationAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetZeroConfigurationResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns org.onvif.ver10.schema.NetworkZeroConfiguration
     */
    @WebMethod(operationName = "GetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration")
    @WebResult(name = "ZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfiguration")
    @ResponseWrapper(localName = "GetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfigurationResponse")
    public NetworkZeroConfiguration getZeroConfiguration();

    /**
     * This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
     * 
     * @param enabled
     * @param interfaceToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetZeroConfigurationResponse>
     */
    @WebMethod(operationName = "SetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration")
    @RequestWrapper(localName = "SetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfiguration")
    @ResponseWrapper(localName = "SetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfigurationResponse")
    public Response<SetZeroConfigurationResponse> setZeroConfigurationAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled);

    /**
     * This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
     * 
     * @param enabled
     * @param interfaceToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration")
    @RequestWrapper(localName = "SetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfiguration")
    @ResponseWrapper(localName = "SetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfigurationResponse")
    public Future<?> setZeroConfigurationAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetZeroConfigurationResponse> asyncHandler);

    /**
     * This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
     * 
     * @param enabled
     * @param interfaceToken
     */
    @WebMethod(operationName = "SetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration")
    @RequestWrapper(localName = "SetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfiguration")
    @ResponseWrapper(localName = "SetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfigurationResponse")
    public void setZeroConfiguration(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled);

    /**
     * This operation gets the IP address filter settings from a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support the GetIPAddressFilter command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetIPAddressFilterResponse>
     */
    @WebMethod(operationName = "GetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter")
    @RequestWrapper(localName = "GetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilter")
    @ResponseWrapper(localName = "GetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilterResponse")
    public Response<GetIPAddressFilterResponse> getIPAddressFilterAsync();

    /**
     * This operation gets the IP address filter settings from a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support the GetIPAddressFilter command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter")
    @RequestWrapper(localName = "GetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilter")
    @ResponseWrapper(localName = "GetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilterResponse")
    public Future<?> getIPAddressFilterAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetIPAddressFilterResponse> asyncHandler);

    /**
     * This operation gets the IP address filter settings from a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support the GetIPAddressFilter command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.IPAddressFilter
     */
    @WebMethod(operationName = "GetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter")
    @WebResult(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilter")
    @ResponseWrapper(localName = "GetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilterResponse")
    public IPAddressFilter getIPAddressFilter();

    /**
     * This operation sets the IP address filter settings on a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support configuration of IP filtering rules through the SetIPAddressFilter
     * 				command.
     * 
     * @param ipAddressFilter
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetIPAddressFilterResponse>
     */
    @WebMethod(operationName = "SetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter")
    @RequestWrapper(localName = "SetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilter")
    @ResponseWrapper(localName = "SetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilterResponse")
    public Response<SetIPAddressFilterResponse> setIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * This operation sets the IP address filter settings on a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support configuration of IP filtering rules through the SetIPAddressFilter
     * 				command.
     * 
     * @param ipAddressFilter
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter")
    @RequestWrapper(localName = "SetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilter")
    @ResponseWrapper(localName = "SetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilterResponse")
    public Future<?> setIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetIPAddressFilterResponse> asyncHandler);

    /**
     * This operation sets the IP address filter settings on a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support configuration of IP filtering rules through the SetIPAddressFilter
     * 				command.
     * 
     * @param ipAddressFilter
     */
    @WebMethod(operationName = "SetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter")
    @RequestWrapper(localName = "SetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilter")
    @ResponseWrapper(localName = "SetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilterResponse")
    public void setIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * This operation adds an IP filter address to a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
     * 
     * @param ipAddressFilter
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.AddIPAddressFilterResponse>
     */
    @WebMethod(operationName = "AddIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter")
    @RequestWrapper(localName = "AddIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilter")
    @ResponseWrapper(localName = "AddIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilterResponse")
    public Response<AddIPAddressFilterResponse> addIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * This operation adds an IP filter address to a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
     * 
     * @param ipAddressFilter
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "AddIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter")
    @RequestWrapper(localName = "AddIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilter")
    @ResponseWrapper(localName = "AddIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilterResponse")
    public Future<?> addIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddIPAddressFilterResponse> asyncHandler);

    /**
     * This operation adds an IP filter address to a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
     * 
     * @param ipAddressFilter
     */
    @WebMethod(operationName = "AddIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter")
    @RequestWrapper(localName = "AddIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilter")
    @ResponseWrapper(localName = "AddIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilterResponse")
    public void addIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * This operation deletes an IP filter address from a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
     * 
     * @param ipAddressFilter
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.RemoveIPAddressFilterResponse>
     */
    @WebMethod(operationName = "RemoveIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter")
    @RequestWrapper(localName = "RemoveIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilter")
    @ResponseWrapper(localName = "RemoveIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilterResponse")
    public Response<RemoveIPAddressFilterResponse> removeIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * This operation deletes an IP filter address from a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
     * 
     * @param ipAddressFilter
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "RemoveIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter")
    @RequestWrapper(localName = "RemoveIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilter")
    @ResponseWrapper(localName = "RemoveIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilterResponse")
    public Future<?> removeIPAddressFilterAsync(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemoveIPAddressFilterResponse> asyncHandler);

    /**
     * This operation deletes an IP filter address from a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
     * 
     * @param ipAddressFilter
     */
    @WebMethod(operationName = "RemoveIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter")
    @RequestWrapper(localName = "RemoveIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilter")
    @ResponseWrapper(localName = "RemoveIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilterResponse")
    public void removeIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        IPAddressFilter ipAddressFilter);

    /**
     * Access to different services and sub-sets of services should be subject to access control. The
     * 				WS-Security framework gives the prerequisite for end-point authentication. Authorization
     * 				decisions can then be taken using an access security policy. This standard does not mandate
     * 				any particular policy description format or security policy but this is up to the device
     * 				manufacturer or system provider to choose policy and policy description format of choice.
     * 				However, an access policy (in arbitrary format) can be requested using this command. If the
     * 				device supports access policy settings based on WS-Security authentication, then the device
     * 				shall support this command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetAccessPolicyResponse>
     */
    @WebMethod(operationName = "GetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy")
    @RequestWrapper(localName = "GetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicy")
    @ResponseWrapper(localName = "GetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicyResponse")
    public Response<GetAccessPolicyResponse> getAccessPolicyAsync();

    /**
     * Access to different services and sub-sets of services should be subject to access control. The
     * 				WS-Security framework gives the prerequisite for end-point authentication. Authorization
     * 				decisions can then be taken using an access security policy. This standard does not mandate
     * 				any particular policy description format or security policy but this is up to the device
     * 				manufacturer or system provider to choose policy and policy description format of choice.
     * 				However, an access policy (in arbitrary format) can be requested using this command. If the
     * 				device supports access policy settings based on WS-Security authentication, then the device
     * 				shall support this command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy")
    @RequestWrapper(localName = "GetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicy")
    @ResponseWrapper(localName = "GetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicyResponse")
    public Future<?> getAccessPolicyAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAccessPolicyResponse> asyncHandler);

    /**
     * Access to different services and sub-sets of services should be subject to access control. The
     * 				WS-Security framework gives the prerequisite for end-point authentication. Authorization
     * 				decisions can then be taken using an access security policy. This standard does not mandate
     * 				any particular policy description format or security policy but this is up to the device
     * 				manufacturer or system provider to choose policy and policy description format of choice.
     * 				However, an access policy (in arbitrary format) can be requested using this command. If the
     * 				device supports access policy settings based on WS-Security authentication, then the device
     * 				shall support this command.
     * 
     * @return
     *     returns org.onvif.ver10.schema.BinaryData
     */
    @WebMethod(operationName = "GetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy")
    @WebResult(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicy")
    @ResponseWrapper(localName = "GetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicyResponse")
    public BinaryData getAccessPolicy();

    /**
     * This command sets the device access security policy (for more details on the access security
     * 				policy see the Get command). If the device supports access policy settings
     * 				based on WS-Security authentication, then the device shall support this command.
     * 
     * @param policyFile
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetAccessPolicyResponse>
     */
    @WebMethod(operationName = "SetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy")
    @RequestWrapper(localName = "SetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicy")
    @ResponseWrapper(localName = "SetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicyResponse")
    public Response<SetAccessPolicyResponse> setAccessPolicyAsync(
        @WebParam(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData policyFile);

    /**
     * This command sets the device access security policy (for more details on the access security
     * 				policy see the Get command). If the device supports access policy settings
     * 				based on WS-Security authentication, then the device shall support this command.
     * 
     * @param asyncHandler
     * @param policyFile
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy")
    @RequestWrapper(localName = "SetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicy")
    @ResponseWrapper(localName = "SetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicyResponse")
    public Future<?> setAccessPolicyAsync(
        @WebParam(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData policyFile,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetAccessPolicyResponse> asyncHandler);

    /**
     * This command sets the device access security policy (for more details on the access security
     * 				policy see the Get command). If the device supports access policy settings
     * 				based on WS-Security authentication, then the device shall support this command.
     * 
     * @param policyFile
     */
    @WebMethod(operationName = "SetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy")
    @RequestWrapper(localName = "SetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicy")
    @ResponseWrapper(localName = "SetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicyResponse")
    public void setAccessPolicy(
        @WebParam(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData policyFile);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param validNotAfter
     * @param validNotBefore
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.CreateCertificateResponse>
     */
    @WebMethod(operationName = "CreateCertificate", action = "http://www.onvif.org/ver10/device/wsdl/CreateCertificate")
    @RequestWrapper(localName = "CreateCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificate")
    @ResponseWrapper(localName = "CreateCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificateResponse")
    public Response<CreateCertificateResponse> createCertificateAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "ValidNotBefore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotBefore,
        @WebParam(name = "ValidNotAfter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotAfter);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param validNotAfter
     * @param asyncHandler
     * @param validNotBefore
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "CreateCertificate", action = "http://www.onvif.org/ver10/device/wsdl/CreateCertificate")
    @RequestWrapper(localName = "CreateCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificate")
    @ResponseWrapper(localName = "CreateCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificateResponse")
    public Future<?> createCertificateAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "ValidNotBefore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotBefore,
        @WebParam(name = "ValidNotAfter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotAfter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateCertificateResponse> asyncHandler);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param validNotAfter
     * @param validNotBefore
     * @return
     *     returns org.onvif.ver10.schema.Certificate
     */
    @WebMethod(operationName = "CreateCertificate", action = "http://www.onvif.org/ver10/device/wsdl/CreateCertificate")
    @WebResult(name = "NvtCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "CreateCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificate")
    @ResponseWrapper(localName = "CreateCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificateResponse")
    public Certificate createCertificate(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "ValidNotBefore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotBefore,
        @WebParam(name = "ValidNotAfter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        XMLGregorianCalendar validNotAfter);

    /**
     * This operation gets all device server certificates (including self-signed) for the purpose of TLS
     * 				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
     * 				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
     * 				device (neither trusted CA certificates nor trusted root certificates). The certificates are
     * 				returned as binary data. A device that supports TLS shall support this command and the
     * 				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetCertificatesResponse>
     */
    @WebMethod(operationName = "GetCertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificates")
    @RequestWrapper(localName = "GetCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificates")
    @ResponseWrapper(localName = "GetCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesResponse")
    public Response<GetCertificatesResponse> getCertificatesAsync();

    /**
     * This operation gets all device server certificates (including self-signed) for the purpose of TLS
     * 				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
     * 				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
     * 				device (neither trusted CA certificates nor trusted root certificates). The certificates are
     * 				returned as binary data. A device that supports TLS shall support this command and the
     * 				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetCertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificates")
    @RequestWrapper(localName = "GetCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificates")
    @ResponseWrapper(localName = "GetCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesResponse")
    public Future<?> getCertificatesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCertificatesResponse> asyncHandler);

    /**
     * This operation gets all device server certificates (including self-signed) for the purpose of TLS
     * 				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
     * 				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
     * 				device (neither trusted CA certificates nor trusted root certificates). The certificates are
     * 				returned as binary data. A device that supports TLS shall support this command and the
     * 				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.Certificate>
     */
    @WebMethod(operationName = "GetCertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificates")
    @WebResult(name = "NvtCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificates")
    @ResponseWrapper(localName = "GetCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesResponse")
    public List<Certificate> getCertificates();

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
     * 				support this command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetCertificatesStatusResponse>
     */
    @WebMethod(operationName = "GetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus")
    @RequestWrapper(localName = "GetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatus")
    @ResponseWrapper(localName = "GetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatusResponse")
    public Response<GetCertificatesStatusResponse> getCertificatesStatusAsync();

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
     * 				support this command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus")
    @RequestWrapper(localName = "GetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatus")
    @ResponseWrapper(localName = "GetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatusResponse")
    public Future<?> getCertificatesStatusAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCertificatesStatusResponse> asyncHandler);

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
     * 				support this command.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.CertificateStatus>
     */
    @WebMethod(operationName = "GetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus")
    @WebResult(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatus")
    @ResponseWrapper(localName = "GetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatusResponse")
    public List<CertificateStatus> getCertificatesStatus();

    /**
     * This operation is specific to TLS functionality. This operation sets the status (enable/disable)
     * 				of the device TLS server certificates. A device that supports TLS shall support this command.
     * 				Typically only one device server certificate is allowed to be enabled at a time.
     * 
     * @param certificateStatus
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetCertificatesStatusResponse>
     */
    @WebMethod(operationName = "SetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus")
    @RequestWrapper(localName = "SetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatus")
    @ResponseWrapper(localName = "SetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatusResponse")
    public Response<SetCertificatesStatusResponse> setCertificatesStatusAsync(
        @WebParam(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateStatus> certificateStatus);

    /**
     * This operation is specific to TLS functionality. This operation sets the status (enable/disable)
     * 				of the device TLS server certificates. A device that supports TLS shall support this command.
     * 				Typically only one device server certificate is allowed to be enabled at a time.
     * 
     * @param asyncHandler
     * @param certificateStatus
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus")
    @RequestWrapper(localName = "SetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatus")
    @ResponseWrapper(localName = "SetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatusResponse")
    public Future<?> setCertificatesStatusAsync(
        @WebParam(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateStatus> certificateStatus,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetCertificatesStatusResponse> asyncHandler);

    /**
     * This operation is specific to TLS functionality. This operation sets the status (enable/disable)
     * 				of the device TLS server certificates. A device that supports TLS shall support this command.
     * 				Typically only one device server certificate is allowed to be enabled at a time.
     * 
     * @param certificateStatus
     */
    @WebMethod(operationName = "SetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus")
    @RequestWrapper(localName = "SetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatus")
    @ResponseWrapper(localName = "SetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatusResponse")
    public void setCertificatesStatus(
        @WebParam(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateStatus> certificateStatus);

    /**
     * This operation deletes a certificate or multiple certificates. The device MAY also delete a
     * 				private/public key pair which is coupled with the certificate to be deleted. The device that
     * 				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
     * 				certificates through this command. Either all certificates are deleted successfully or a fault
     * 				message shall be returned without deleting any certificate.
     * 
     * @param certificateID
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.DeleteCertificatesResponse>
     */
    @WebMethod(operationName = "DeleteCertificates", action = "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates")
    @RequestWrapper(localName = "DeleteCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificates")
    @ResponseWrapper(localName = "DeleteCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificatesResponse")
    public Response<DeleteCertificatesResponse> deleteCertificatesAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> certificateID);

    /**
     * This operation deletes a certificate or multiple certificates. The device MAY also delete a
     * 				private/public key pair which is coupled with the certificate to be deleted. The device that
     * 				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
     * 				certificates through this command. Either all certificates are deleted successfully or a fault
     * 				message shall be returned without deleting any certificate.
     * 
     * @param certificateID
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DeleteCertificates", action = "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates")
    @RequestWrapper(localName = "DeleteCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificates")
    @ResponseWrapper(localName = "DeleteCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificatesResponse")
    public Future<?> deleteCertificatesAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> certificateID,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteCertificatesResponse> asyncHandler);

    /**
     * This operation deletes a certificate or multiple certificates. The device MAY also delete a
     * 				private/public key pair which is coupled with the certificate to be deleted. The device that
     * 				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
     * 				certificates through this command. Either all certificates are deleted successfully or a fault
     * 				message shall be returned without deleting any certificate.
     * 
     * @param certificateID
     */
    @WebMethod(operationName = "DeleteCertificates", action = "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates")
    @RequestWrapper(localName = "DeleteCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificates")
    @ResponseWrapper(localName = "DeleteCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificatesResponse")
    public void deleteCertificates(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> certificateID);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param attributes
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetPkcs10RequestResponse>
     */
    @WebMethod(operationName = "GetPkcs10Request", action = "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request")
    @RequestWrapper(localName = "GetPkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10Request")
    @ResponseWrapper(localName = "GetPkcs10RequestResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10RequestResponse")
    public Response<GetPkcs10RequestResponse> getPkcs10RequestAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "Attributes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData attributes);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param asyncHandler
     * @param attributes
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetPkcs10Request", action = "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request")
    @RequestWrapper(localName = "GetPkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10Request")
    @ResponseWrapper(localName = "GetPkcs10RequestResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10RequestResponse")
    public Future<?> getPkcs10RequestAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "Attributes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData attributes,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPkcs10RequestResponse> asyncHandler);

    /**
     * 
     * @param certificateID
     * @param subject
     * @param attributes
     * @return
     *     returns org.onvif.ver10.schema.BinaryData
     */
    @WebMethod(operationName = "GetPkcs10Request", action = "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request")
    @WebResult(name = "Pkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetPkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10Request")
    @ResponseWrapper(localName = "GetPkcs10RequestResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10RequestResponse")
    public BinaryData getPkcs10Request(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String subject,
        @WebParam(name = "Attributes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        BinaryData attributes);

    /**
     * 
     * @param nvtCertificate
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.LoadCertificatesResponse>
     */
    @WebMethod(operationName = "LoadCertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificates")
    @RequestWrapper(localName = "LoadCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificates")
    @ResponseWrapper(localName = "LoadCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificatesResponse")
    public Response<LoadCertificatesResponse> loadCertificatesAsync(
        @WebParam(name = "NVTCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> nvtCertificate);

    /**
     * 
     * @param asyncHandler
     * @param nvtCertificate
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "LoadCertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificates")
    @RequestWrapper(localName = "LoadCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificates")
    @ResponseWrapper(localName = "LoadCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificatesResponse")
    public Future<?> loadCertificatesAsync(
        @WebParam(name = "NVTCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> nvtCertificate,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LoadCertificatesResponse> asyncHandler);

    /**
     * 
     * @param nvtCertificate
     */
    @WebMethod(operationName = "LoadCertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificates")
    @RequestWrapper(localName = "LoadCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificates")
    @ResponseWrapper(localName = "LoadCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificatesResponse")
    public void loadCertificates(
        @WebParam(name = "NVTCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> nvtCertificate);

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetClientCertificateModeResponse>
     */
    @WebMethod(operationName = "GetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode")
    @RequestWrapper(localName = "GetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateMode")
    @ResponseWrapper(localName = "GetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateModeResponse")
    public Response<GetClientCertificateModeResponse> getClientCertificateModeAsync();

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode")
    @RequestWrapper(localName = "GetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateMode")
    @ResponseWrapper(localName = "GetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateModeResponse")
    public Future<?> getClientCertificateModeAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetClientCertificateModeResponse> asyncHandler);

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @return
     *     returns boolean
     */
    @WebMethod(operationName = "GetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode")
    @WebResult(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateMode")
    @ResponseWrapper(localName = "GetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateModeResponse")
    public boolean getClientCertificateMode();

    /**
     * This operation is specific to TLS functionality. This operation sets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @param enabled
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetClientCertificateModeResponse>
     */
    @WebMethod(operationName = "SetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode")
    @RequestWrapper(localName = "SetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateMode")
    @ResponseWrapper(localName = "SetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateModeResponse")
    public Response<SetClientCertificateModeResponse> setClientCertificateModeAsync(
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled);

    /**
     * This operation is specific to TLS functionality. This operation sets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @param enabled
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode")
    @RequestWrapper(localName = "SetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateMode")
    @ResponseWrapper(localName = "SetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateModeResponse")
    public Future<?> setClientCertificateModeAsync(
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetClientCertificateModeResponse> asyncHandler);

    /**
     * This operation is specific to TLS functionality. This operation sets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     * 
     * @param enabled
     */
    @WebMethod(operationName = "SetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode")
    @RequestWrapper(localName = "SetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateMode")
    @ResponseWrapper(localName = "SetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateModeResponse")
    public void setClientCertificateMode(
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetRelayOutputsResponse>
     */
    @WebMethod(operationName = "GetRelayOutputs", action = "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs")
    @RequestWrapper(localName = "GetRelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputs")
    @ResponseWrapper(localName = "GetRelayOutputsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputsResponse")
    public Response<GetRelayOutputsResponse> getRelayOutputsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRelayOutputs", action = "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs")
    @RequestWrapper(localName = "GetRelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputs")
    @ResponseWrapper(localName = "GetRelayOutputsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputsResponse")
    public Future<?> getRelayOutputsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRelayOutputsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.RelayOutput>
     */
    @WebMethod(operationName = "GetRelayOutputs", action = "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs")
    @WebResult(name = "RelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputs")
    @ResponseWrapper(localName = "GetRelayOutputsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputsResponse")
    public List<RelayOutput> getRelayOutputs();

    /**
     * 
     * @param relayOutputToken
     * @param properties
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetRelayOutputSettingsResponse>
     */
    @WebMethod(operationName = "SetRelayOutputSettings", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings")
    @RequestWrapper(localName = "SetRelayOutputSettings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettings")
    @ResponseWrapper(localName = "SetRelayOutputSettingsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettingsResponse")
    public Response<SetRelayOutputSettingsResponse> setRelayOutputSettingsAsync(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "Properties", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayOutputSettings properties);

    /**
     * 
     * @param relayOutputToken
     * @param asyncHandler
     * @param properties
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetRelayOutputSettings", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings")
    @RequestWrapper(localName = "SetRelayOutputSettings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettings")
    @ResponseWrapper(localName = "SetRelayOutputSettingsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettingsResponse")
    public Future<?> setRelayOutputSettingsAsync(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "Properties", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayOutputSettings properties,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetRelayOutputSettingsResponse> asyncHandler);

    /**
     * 
     * @param relayOutputToken
     * @param properties
     */
    @WebMethod(operationName = "SetRelayOutputSettings", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings")
    @RequestWrapper(localName = "SetRelayOutputSettings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettings")
    @ResponseWrapper(localName = "SetRelayOutputSettingsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettingsResponse")
    public void setRelayOutputSettings(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "Properties", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayOutputSettings properties);

    /**
     * 
     * @param relayOutputToken
     * @param logicalState
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetRelayOutputStateResponse>
     */
    @WebMethod(operationName = "SetRelayOutputState", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState")
    @RequestWrapper(localName = "SetRelayOutputState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputState")
    @ResponseWrapper(localName = "SetRelayOutputStateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputStateResponse")
    public Response<SetRelayOutputStateResponse> setRelayOutputStateAsync(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "LogicalState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayLogicalState logicalState);

    /**
     * 
     * @param relayOutputToken
     * @param asyncHandler
     * @param logicalState
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetRelayOutputState", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState")
    @RequestWrapper(localName = "SetRelayOutputState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputState")
    @ResponseWrapper(localName = "SetRelayOutputStateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputStateResponse")
    public Future<?> setRelayOutputStateAsync(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "LogicalState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayLogicalState logicalState,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetRelayOutputStateResponse> asyncHandler);

    /**
     * 
     * @param relayOutputToken
     * @param logicalState
     */
    @WebMethod(operationName = "SetRelayOutputState", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState")
    @RequestWrapper(localName = "SetRelayOutputState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputState")
    @ResponseWrapper(localName = "SetRelayOutputStateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputStateResponse")
    public void setRelayOutputState(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String relayOutputToken,
        @WebParam(name = "LogicalState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        RelayLogicalState logicalState);

    /**
     * 
     * @param auxiliaryCommand
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SendAuxiliaryCommandResponse>
     */
    @WebMethod(operationName = "SendAuxiliaryCommand", action = "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand")
    @RequestWrapper(localName = "SendAuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommand")
    @ResponseWrapper(localName = "SendAuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommandResponse")
    public Response<SendAuxiliaryCommandResponse> sendAuxiliaryCommandAsync(
        @WebParam(name = "AuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String auxiliaryCommand);

    /**
     * 
     * @param auxiliaryCommand
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SendAuxiliaryCommand", action = "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand")
    @RequestWrapper(localName = "SendAuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommand")
    @ResponseWrapper(localName = "SendAuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommandResponse")
    public Future<?> sendAuxiliaryCommandAsync(
        @WebParam(name = "AuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String auxiliaryCommand,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SendAuxiliaryCommandResponse> asyncHandler);

    /**
     * 
     * @param auxiliaryCommand
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "SendAuxiliaryCommand", action = "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand")
    @WebResult(name = "AuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SendAuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommand")
    @ResponseWrapper(localName = "SendAuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommandResponse")
    public String sendAuxiliaryCommand(
        @WebParam(name = "AuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String auxiliaryCommand);

    /**
     * CA certificates will be loaded into a device and be used for the sake of following two cases.
     * 				The one is for the purpose of TLS client authentication in TLS server function. The other one
     * 				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
     * 				operation gets all CA certificates loaded into a device. A device that supports either TLS client
     * 				authentication or IEEE 802.1X shall support this command and the returned certificates shall
     * 				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetCACertificatesResponse>
     */
    @WebMethod(operationName = "GetCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCACertificates")
    @RequestWrapper(localName = "GetCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificates")
    @ResponseWrapper(localName = "GetCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificatesResponse")
    public Response<GetCACertificatesResponse> getCACertificatesAsync();

    /**
     * CA certificates will be loaded into a device and be used for the sake of following two cases.
     * 				The one is for the purpose of TLS client authentication in TLS server function. The other one
     * 				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
     * 				operation gets all CA certificates loaded into a device. A device that supports either TLS client
     * 				authentication or IEEE 802.1X shall support this command and the returned certificates shall
     * 				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCACertificates")
    @RequestWrapper(localName = "GetCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificates")
    @ResponseWrapper(localName = "GetCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificatesResponse")
    public Future<?> getCACertificatesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCACertificatesResponse> asyncHandler);

    /**
     * CA certificates will be loaded into a device and be used for the sake of following two cases.
     * 				The one is for the purpose of TLS client authentication in TLS server function. The other one
     * 				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
     * 				operation gets all CA certificates loaded into a device. A device that supports either TLS client
     * 				authentication or IEEE 802.1X shall support this command and the returned certificates shall
     * 				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.Certificate>
     */
    @WebMethod(operationName = "GetCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCACertificates")
    @WebResult(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificates")
    @ResponseWrapper(localName = "GetCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificatesResponse")
    public List<Certificate> getCACertificates();

    /**
     * 
     * @param certificateWithPrivateKey
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKeyResponse>
     */
    @WebMethod(operationName = "LoadCertificateWithPrivateKey", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey")
    @RequestWrapper(localName = "LoadCertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKey")
    @ResponseWrapper(localName = "LoadCertificateWithPrivateKeyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKeyResponse")
    public Response<LoadCertificateWithPrivateKeyResponse> loadCertificateWithPrivateKeyAsync(
        @WebParam(name = "CertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateWithPrivateKey> certificateWithPrivateKey);

    /**
     * 
     * @param asyncHandler
     * @param certificateWithPrivateKey
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "LoadCertificateWithPrivateKey", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey")
    @RequestWrapper(localName = "LoadCertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKey")
    @ResponseWrapper(localName = "LoadCertificateWithPrivateKeyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKeyResponse")
    public Future<?> loadCertificateWithPrivateKeyAsync(
        @WebParam(name = "CertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateWithPrivateKey> certificateWithPrivateKey,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LoadCertificateWithPrivateKeyResponse> asyncHandler);

    /**
     * 
     * @param certificateWithPrivateKey
     */
    @WebMethod(operationName = "LoadCertificateWithPrivateKey", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey")
    @RequestWrapper(localName = "LoadCertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKey")
    @ResponseWrapper(localName = "LoadCertificateWithPrivateKeyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKeyResponse")
    public void loadCertificateWithPrivateKey(
        @WebParam(name = "CertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<CertificateWithPrivateKey> certificateWithPrivateKey);

    /**
     * 
     * @param certificateID
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetCertificateInformationResponse>
     */
    @WebMethod(operationName = "GetCertificateInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation")
    @RequestWrapper(localName = "GetCertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformation")
    @ResponseWrapper(localName = "GetCertificateInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformationResponse")
    public Response<GetCertificateInformationResponse> getCertificateInformationAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID);

    /**
     * 
     * @param certificateID
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetCertificateInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation")
    @RequestWrapper(localName = "GetCertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformation")
    @ResponseWrapper(localName = "GetCertificateInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformationResponse")
    public Future<?> getCertificateInformationAsync(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCertificateInformationResponse> asyncHandler);

    /**
     * 
     * @param certificateID
     * @return
     *     returns org.onvif.ver10.schema.CertificateInformation
     */
    @WebMethod(operationName = "GetCertificateInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation")
    @WebResult(name = "CertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformation")
    @ResponseWrapper(localName = "GetCertificateInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformationResponse")
    public CertificateInformation getCertificateInformation(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String certificateID);

    /**
     * 
     * @param caCertificate
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.LoadCACertificatesResponse>
     */
    @WebMethod(operationName = "LoadCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates")
    @RequestWrapper(localName = "LoadCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificates")
    @ResponseWrapper(localName = "LoadCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificatesResponse")
    public Response<LoadCACertificatesResponse> loadCACertificatesAsync(
        @WebParam(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> caCertificate);

    /**
     * 
     * @param caCertificate
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "LoadCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates")
    @RequestWrapper(localName = "LoadCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificates")
    @ResponseWrapper(localName = "LoadCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificatesResponse")
    public Future<?> loadCACertificatesAsync(
        @WebParam(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> caCertificate,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LoadCACertificatesResponse> asyncHandler);

    /**
     * 
     * @param caCertificate
     */
    @WebMethod(operationName = "LoadCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates")
    @RequestWrapper(localName = "LoadCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificates")
    @ResponseWrapper(localName = "LoadCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificatesResponse")
    public void loadCACertificates(
        @WebParam(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<Certificate> caCertificate);

    /**
     * This operation newly creates IEEE 802.1X configuration parameter set of the device. The
     * 				device shall support this command if it supports IEEE 802.1X. If the device receives this
     * 				request with already existing configuration token (Dot1XConfigurationToken) specification, the
     * 				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
     * 				conflict.
     * 
     * @param dot1XConfiguration
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.CreateDot1XConfigurationResponse>
     */
    @WebMethod(operationName = "CreateDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration")
    @RequestWrapper(localName = "CreateDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfiguration")
    @ResponseWrapper(localName = "CreateDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfigurationResponse")
    public Response<CreateDot1XConfigurationResponse> createDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration);

    /**
     * This operation newly creates IEEE 802.1X configuration parameter set of the device. The
     * 				device shall support this command if it supports IEEE 802.1X. If the device receives this
     * 				request with already existing configuration token (Dot1XConfigurationToken) specification, the
     * 				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
     * 				conflict.
     * 
     * @param asyncHandler
     * @param dot1XConfiguration
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "CreateDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration")
    @RequestWrapper(localName = "CreateDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfiguration")
    @ResponseWrapper(localName = "CreateDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfigurationResponse")
    public Future<?> createDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateDot1XConfigurationResponse> asyncHandler);

    /**
     * This operation newly creates IEEE 802.1X configuration parameter set of the device. The
     * 				device shall support this command if it supports IEEE 802.1X. If the device receives this
     * 				request with already existing configuration token (Dot1XConfigurationToken) specification, the
     * 				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
     * 				conflict.
     * 
     * @param dot1XConfiguration
     */
    @WebMethod(operationName = "CreateDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration")
    @RequestWrapper(localName = "CreateDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfiguration")
    @ResponseWrapper(localName = "CreateDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfigurationResponse")
    public void createDot1XConfiguration(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration);

    /**
     * While the CreateDot1XConfiguration command is trying to create a new configuration
     * 				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
     * 				the device. A device that support IEEE 802.1X shall support this command.
     * 
     * @param dot1XConfiguration
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetDot1XConfigurationResponse>
     */
    @WebMethod(operationName = "SetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration")
    @RequestWrapper(localName = "SetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfiguration")
    @ResponseWrapper(localName = "SetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfigurationResponse")
    public Response<SetDot1XConfigurationResponse> setDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration);

    /**
     * While the CreateDot1XConfiguration command is trying to create a new configuration
     * 				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
     * 				the device. A device that support IEEE 802.1X shall support this command.
     * 
     * @param asyncHandler
     * @param dot1XConfiguration
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration")
    @RequestWrapper(localName = "SetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfiguration")
    @ResponseWrapper(localName = "SetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfigurationResponse")
    public Future<?> setDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetDot1XConfigurationResponse> asyncHandler);

    /**
     * While the CreateDot1XConfiguration command is trying to create a new configuration
     * 				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
     * 				the device. A device that support IEEE 802.1X shall support this command.
     * 
     * @param dot1XConfiguration
     */
    @WebMethod(operationName = "SetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration")
    @RequestWrapper(localName = "SetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfiguration")
    @ResponseWrapper(localName = "SetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfigurationResponse")
    public void setDot1XConfiguration(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        Dot1XConfiguration dot1XConfiguration);

    /**
     * 
     * @param dot1XConfigurationToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDot1XConfigurationResponse>
     */
    @WebMethod(operationName = "GetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration")
    @RequestWrapper(localName = "GetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfiguration")
    @ResponseWrapper(localName = "GetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationResponse")
    public Response<GetDot1XConfigurationResponse> getDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String dot1XConfigurationToken);

    /**
     * 
     * @param dot1XConfigurationToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration")
    @RequestWrapper(localName = "GetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfiguration")
    @ResponseWrapper(localName = "GetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationResponse")
    public Future<?> getDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String dot1XConfigurationToken,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDot1XConfigurationResponse> asyncHandler);

    /**
     * 
     * @param dot1XConfigurationToken
     * @return
     *     returns org.onvif.ver10.schema.Dot1XConfiguration
     */
    @WebMethod(operationName = "GetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration")
    @WebResult(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfiguration")
    @ResponseWrapper(localName = "GetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationResponse")
    public Dot1XConfiguration getDot1XConfiguration(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String dot1XConfigurationToken);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDot1XConfigurationsResponse>
     */
    @WebMethod(operationName = "GetDot1XConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations")
    @RequestWrapper(localName = "GetDot1XConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurations")
    @ResponseWrapper(localName = "GetDot1XConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationsResponse")
    public Response<GetDot1XConfigurationsResponse> getDot1XConfigurationsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDot1XConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations")
    @RequestWrapper(localName = "GetDot1XConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurations")
    @ResponseWrapper(localName = "GetDot1XConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationsResponse")
    public Future<?> getDot1XConfigurationsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDot1XConfigurationsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.Dot1XConfiguration>
     */
    @WebMethod(operationName = "GetDot1XConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations")
    @WebResult(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot1XConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurations")
    @ResponseWrapper(localName = "GetDot1XConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationsResponse")
    public List<Dot1XConfiguration> getDot1XConfigurations();

    /**
     * This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
     * 				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
     * 				A device that support IEEE 802.1X shall support this command.
     * 
     * @param dot1XConfigurationToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.DeleteDot1XConfigurationResponse>
     */
    @WebMethod(operationName = "DeleteDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration")
    @RequestWrapper(localName = "DeleteDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfiguration")
    @ResponseWrapper(localName = "DeleteDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfigurationResponse")
    public Response<DeleteDot1XConfigurationResponse> deleteDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> dot1XConfigurationToken);

    /**
     * This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
     * 				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
     * 				A device that support IEEE 802.1X shall support this command.
     * 
     * @param dot1XConfigurationToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DeleteDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration")
    @RequestWrapper(localName = "DeleteDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfiguration")
    @ResponseWrapper(localName = "DeleteDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfigurationResponse")
    public Future<?> deleteDot1XConfigurationAsync(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> dot1XConfigurationToken,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteDot1XConfigurationResponse> asyncHandler);

    /**
     * This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
     * 				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
     * 				A device that support IEEE 802.1X shall support this command.
     * 
     * @param dot1XConfigurationToken
     */
    @WebMethod(operationName = "DeleteDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration")
    @RequestWrapper(localName = "DeleteDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfiguration")
    @ResponseWrapper(localName = "DeleteDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfigurationResponse")
    public void deleteDot1XConfiguration(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<String> dot1XConfigurationToken);

    /**
     * This operation returns the IEEE802.11 capabilities. The device shall support
     * 				this operation.
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDot11CapabilitiesResponse>
     */
    @WebMethod(operationName = "GetDot11Capabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Response<GetDot11CapabilitiesResponse> getDot11CapabilitiesAsync(
        @WebParam(name = "GetDot11Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetDot11Capabilities parameters);

    /**
     * This operation returns the IEEE802.11 capabilities. The device shall support
     * 				this operation.
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDot11Capabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Future<?> getDot11CapabilitiesAsync(
        @WebParam(name = "GetDot11Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetDot11Capabilities parameters,
        @WebParam(name = "GetDot11CapabilitiesResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetDot11CapabilitiesResponse> asyncHandler);

    /**
     * This operation returns the IEEE802.11 capabilities. The device shall support
     * 				this operation.
     * 
     * @param parameters
     * @return
     *     returns org.onvif.ver10.device.wsdl.GetDot11CapabilitiesResponse
     */
    @WebMethod(operationName = "GetDot11Capabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities")
    @WebResult(name = "GetDot11CapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetDot11CapabilitiesResponse getDot11Capabilities(
        @WebParam(name = "GetDot11Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
        GetDot11Capabilities parameters);

    /**
     * This operation returns the status of a wireless network interface. The device shall support this
     * 				command.
     * 
     * @param interfaceToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetDot11StatusResponse>
     */
    @WebMethod(operationName = "GetDot11Status", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Status")
    @RequestWrapper(localName = "GetDot11Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11Status")
    @ResponseWrapper(localName = "GetDot11StatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11StatusResponse")
    public Response<GetDot11StatusResponse> getDot11StatusAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken);

    /**
     * This operation returns the status of a wireless network interface. The device shall support this
     * 				command.
     * 
     * @param interfaceToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDot11Status", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Status")
    @RequestWrapper(localName = "GetDot11Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11Status")
    @ResponseWrapper(localName = "GetDot11StatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11StatusResponse")
    public Future<?> getDot11StatusAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDot11StatusResponse> asyncHandler);

    /**
     * This operation returns the status of a wireless network interface. The device shall support this
     * 				command.
     * 
     * @param interfaceToken
     * @return
     *     returns org.onvif.ver10.schema.Dot11Status
     */
    @WebMethod(operationName = "GetDot11Status", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Status")
    @WebResult(name = "Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot11Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11Status")
    @ResponseWrapper(localName = "GetDot11StatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11StatusResponse")
    public Dot11Status getDot11Status(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken);

    /**
     * This operation returns a lists of the wireless networks in range of the device. A device should
     * 				support this operation.
     * 
     * @param interfaceToken
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.ScanAvailableDot11NetworksResponse>
     */
    @WebMethod(operationName = "ScanAvailableDot11Networks", action = "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks")
    @RequestWrapper(localName = "ScanAvailableDot11Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11Networks")
    @ResponseWrapper(localName = "ScanAvailableDot11NetworksResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11NetworksResponse")
    public Response<ScanAvailableDot11NetworksResponse> scanAvailableDot11NetworksAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken);

    /**
     * This operation returns a lists of the wireless networks in range of the device. A device should
     * 				support this operation.
     * 
     * @param interfaceToken
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "ScanAvailableDot11Networks", action = "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks")
    @RequestWrapper(localName = "ScanAvailableDot11Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11Networks")
    @ResponseWrapper(localName = "ScanAvailableDot11NetworksResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11NetworksResponse")
    public Future<?> scanAvailableDot11NetworksAsync(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ScanAvailableDot11NetworksResponse> asyncHandler);

    /**
     * This operation returns a lists of the wireless networks in range of the device. A device should
     * 				support this operation.
     * 
     * @param interfaceToken
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.Dot11AvailableNetworks>
     */
    @WebMethod(operationName = "ScanAvailableDot11Networks", action = "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks")
    @WebResult(name = "Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "ScanAvailableDot11Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11Networks")
    @ResponseWrapper(localName = "ScanAvailableDot11NetworksResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11NetworksResponse")
    public List<Dot11AvailableNetworks> scanAvailableDot11Networks(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String interfaceToken);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetSystemUrisResponse>
     */
    @WebMethod(operationName = "GetSystemUris", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemUris")
    @RequestWrapper(localName = "GetSystemUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUris")
    @ResponseWrapper(localName = "GetSystemUrisResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUrisResponse")
    public Response<GetSystemUrisResponse> getSystemUrisAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetSystemUris", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemUris")
    @RequestWrapper(localName = "GetSystemUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUris")
    @ResponseWrapper(localName = "GetSystemUrisResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUrisResponse")
    public Future<?> getSystemUrisAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSystemUrisResponse> asyncHandler);

    /**
     * 
     * @param extension
     * @param supportInfoUri
     * @param systemLogUris
     * @param systemBackupUri
     */
    @WebMethod(operationName = "GetSystemUris", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemUris")
    @RequestWrapper(localName = "GetSystemUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUris")
    @ResponseWrapper(localName = "GetSystemUrisResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUrisResponse")
    public void getSystemUris(
        @WebParam(name = "SystemLogUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<SystemLogUriList> systemLogUris,
        @WebParam(name = "SupportInfoUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> supportInfoUri,
        @WebParam(name = "SystemBackupUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> systemBackupUri,
        @WebParam(name = "Extension", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<GetSystemUrisResponse.Extension> extension);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.StartFirmwareUpgradeResponse>
     */
    @WebMethod(operationName = "StartFirmwareUpgrade", action = "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade")
    @RequestWrapper(localName = "StartFirmwareUpgrade", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgrade")
    @ResponseWrapper(localName = "StartFirmwareUpgradeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgradeResponse")
    public Response<StartFirmwareUpgradeResponse> startFirmwareUpgradeAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "StartFirmwareUpgrade", action = "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade")
    @RequestWrapper(localName = "StartFirmwareUpgrade", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgrade")
    @ResponseWrapper(localName = "StartFirmwareUpgradeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgradeResponse")
    public Future<?> startFirmwareUpgradeAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<StartFirmwareUpgradeResponse> asyncHandler);

    /**
     * 
     * @param uploadDelay
     * @param expectedDownTime
     * @param uploadUri
     */
    @WebMethod(operationName = "StartFirmwareUpgrade", action = "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade")
    @RequestWrapper(localName = "StartFirmwareUpgrade", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgrade")
    @ResponseWrapper(localName = "StartFirmwareUpgradeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgradeResponse")
    public void startFirmwareUpgrade(
        @WebParam(name = "UploadUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> uploadUri,
        @WebParam(name = "UploadDelay", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<Duration> uploadDelay,
        @WebParam(name = "ExpectedDownTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<Duration> expectedDownTime);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.StartSystemRestoreResponse>
     */
    @WebMethod(operationName = "StartSystemRestore", action = "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore")
    @RequestWrapper(localName = "StartSystemRestore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestore")
    @ResponseWrapper(localName = "StartSystemRestoreResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestoreResponse")
    public Response<StartSystemRestoreResponse> startSystemRestoreAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "StartSystemRestore", action = "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore")
    @RequestWrapper(localName = "StartSystemRestore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestore")
    @ResponseWrapper(localName = "StartSystemRestoreResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestoreResponse")
    public Future<?> startSystemRestoreAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<StartSystemRestoreResponse> asyncHandler);

    /**
     * 
     * @param expectedDownTime
     * @param uploadUri
     */
    @WebMethod(operationName = "StartSystemRestore", action = "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore")
    @RequestWrapper(localName = "StartSystemRestore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestore")
    @ResponseWrapper(localName = "StartSystemRestoreResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestoreResponse")
    public void startSystemRestore(
        @WebParam(name = "UploadUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<String> uploadUri,
        @WebParam(name = "ExpectedDownTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", mode = WebParam.Mode.OUT)
        Holder<Duration> expectedDownTime);

    /**
     * 
     * 			This operation lists all existing storage configurations for the device. 
     * 			
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetStorageConfigurationsResponse>
     */
    @WebMethod(operationName = "GetStorageConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations")
    @RequestWrapper(localName = "GetStorageConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurations")
    @ResponseWrapper(localName = "GetStorageConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationsResponse")
    public Response<GetStorageConfigurationsResponse> getStorageConfigurationsAsync();

    /**
     * 
     * 			This operation lists all existing storage configurations for the device. 
     * 			
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetStorageConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations")
    @RequestWrapper(localName = "GetStorageConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurations")
    @ResponseWrapper(localName = "GetStorageConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationsResponse")
    public Future<?> getStorageConfigurationsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetStorageConfigurationsResponse> asyncHandler);

    /**
     * 
     * 			This operation lists all existing storage configurations for the device. 
     * 			
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.device.wsdl.StorageConfiguration>
     */
    @WebMethod(operationName = "GetStorageConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations")
    @WebResult(name = "StorageConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetStorageConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurations")
    @ResponseWrapper(localName = "GetStorageConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationsResponse")
    public List<StorageConfiguration> getStorageConfigurations();

    /**
     * 
     * 			This operation creates a new storage configuration. 
     * 			The configuration data shall be created in the device and shall be persistent (remain after reboot).
     * 			
     * 
     * @param storageConfiguration
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.CreateStorageConfigurationResponse>
     */
    @WebMethod(operationName = "CreateStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration")
    @RequestWrapper(localName = "CreateStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfiguration")
    @ResponseWrapper(localName = "CreateStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfigurationResponse")
    public Response<CreateStorageConfigurationResponse> createStorageConfigurationAsync(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfigurationData storageConfiguration);

    /**
     * 
     * 			This operation creates a new storage configuration. 
     * 			The configuration data shall be created in the device and shall be persistent (remain after reboot).
     * 			
     * 
     * @param asyncHandler
     * @param storageConfiguration
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "CreateStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration")
    @RequestWrapper(localName = "CreateStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfiguration")
    @ResponseWrapper(localName = "CreateStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfigurationResponse")
    public Future<?> createStorageConfigurationAsync(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfigurationData storageConfiguration,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateStorageConfigurationResponse> asyncHandler);

    /**
     * 
     * 			This operation creates a new storage configuration. 
     * 			The configuration data shall be created in the device and shall be persistent (remain after reboot).
     * 			
     * 
     * @param storageConfiguration
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "CreateStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration")
    @WebResult(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "CreateStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfiguration")
    @ResponseWrapper(localName = "CreateStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateStorageConfigurationResponse")
    public String createStorageConfiguration(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfigurationData storageConfiguration);

    /**
     * 
     * 			This operation retrieves the Storage configuration associated with the given storage configuration token.
     * 			
     * 
     * @param token
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetStorageConfigurationResponse>
     */
    @WebMethod(operationName = "GetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration")
    @RequestWrapper(localName = "GetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfiguration")
    @ResponseWrapper(localName = "GetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationResponse")
    public Response<GetStorageConfigurationResponse> getStorageConfigurationAsync(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token);

    /**
     * 
     * 			This operation retrieves the Storage configuration associated with the given storage configuration token.
     * 			
     * 
     * @param token
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration")
    @RequestWrapper(localName = "GetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfiguration")
    @ResponseWrapper(localName = "GetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationResponse")
    public Future<?> getStorageConfigurationAsync(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetStorageConfigurationResponse> asyncHandler);

    /**
     * 
     * 			This operation retrieves the Storage configuration associated with the given storage configuration token.
     * 			
     * 
     * @param token
     * @return
     *     returns org.onvif.ver10.device.wsdl.StorageConfiguration
     */
    @WebMethod(operationName = "GetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration")
    @WebResult(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfiguration")
    @ResponseWrapper(localName = "GetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetStorageConfigurationResponse")
    public StorageConfiguration getStorageConfiguration(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token);

    /**
     * 
     * 			This operation modifies an existing Storage configuration.
     * 			
     * 
     * @param storageConfiguration
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetStorageConfigurationResponse>
     */
    @WebMethod(operationName = "SetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration")
    @RequestWrapper(localName = "SetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfiguration")
    @ResponseWrapper(localName = "SetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfigurationResponse")
    public Response<SetStorageConfigurationResponse> setStorageConfigurationAsync(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfiguration storageConfiguration);

    /**
     * 
     * 			This operation modifies an existing Storage configuration.
     * 			
     * 
     * @param asyncHandler
     * @param storageConfiguration
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration")
    @RequestWrapper(localName = "SetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfiguration")
    @ResponseWrapper(localName = "SetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfigurationResponse")
    public Future<?> setStorageConfigurationAsync(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfiguration storageConfiguration,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetStorageConfigurationResponse> asyncHandler);

    /**
     * 
     * 			This operation modifies an existing Storage configuration.
     * 			
     * 
     * @param storageConfiguration
     */
    @WebMethod(operationName = "SetStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration")
    @RequestWrapper(localName = "SetStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfiguration")
    @ResponseWrapper(localName = "SetStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetStorageConfigurationResponse")
    public void setStorageConfiguration(
        @WebParam(name = "StorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        StorageConfiguration storageConfiguration);

    /**
     * 
     * 			This operation deletes the given storage configuration and configuration change shall always be persistent.
     * 			
     * 
     * @param token
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.DeleteStorageConfigurationResponse>
     */
    @WebMethod(operationName = "DeleteStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration")
    @RequestWrapper(localName = "DeleteStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfiguration")
    @ResponseWrapper(localName = "DeleteStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfigurationResponse")
    public Response<DeleteStorageConfigurationResponse> deleteStorageConfigurationAsync(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token);

    /**
     * 
     * 			This operation deletes the given storage configuration and configuration change shall always be persistent.
     * 			
     * 
     * @param token
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DeleteStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration")
    @RequestWrapper(localName = "DeleteStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfiguration")
    @ResponseWrapper(localName = "DeleteStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfigurationResponse")
    public Future<?> deleteStorageConfigurationAsync(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteStorageConfigurationResponse> asyncHandler);

    /**
     * 
     * 			This operation deletes the given storage configuration and configuration change shall always be persistent.
     * 			
     * 
     * @param token
     */
    @WebMethod(operationName = "DeleteStorageConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration")
    @RequestWrapper(localName = "DeleteStorageConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfiguration")
    @ResponseWrapper(localName = "DeleteStorageConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteStorageConfigurationResponse")
    public void deleteStorageConfiguration(
        @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        String token);

    /**
     * 
     * 				This operation lists all existing geo location configurations for the device. 
     * 			
     * 
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.GetGeoLocationResponse>
     */
    @WebMethod(operationName = "GetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation")
    @RequestWrapper(localName = "GetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocation")
    @ResponseWrapper(localName = "GetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocationResponse")
    public Response<GetGeoLocationResponse> getGeoLocationAsync();

    /**
     * 
     * 				This operation lists all existing geo location configurations for the device. 
     * 			
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation")
    @RequestWrapper(localName = "GetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocation")
    @ResponseWrapper(localName = "GetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocationResponse")
    public Future<?> getGeoLocationAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGeoLocationResponse> asyncHandler);

    /**
     * 
     * 				This operation lists all existing geo location configurations for the device. 
     * 			
     * 
     * @return
     *     returns java.util.List<org.onvif.ver10.schema.LocationEntity>
     */
    @WebMethod(operationName = "GetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation")
    @WebResult(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocation")
    @ResponseWrapper(localName = "GetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetGeoLocationResponse")
    public List<LocationEntity> getGeoLocation();

    /**
     * 
     * 				This operation allows to modify one or more geo configuration entries.
     * 			
     * 
     * @param location
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.SetGeoLocationResponse>
     */
    @WebMethod(operationName = "SetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation")
    @RequestWrapper(localName = "SetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocation")
    @ResponseWrapper(localName = "SetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocationResponse")
    public Response<SetGeoLocationResponse> setGeoLocationAsync(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location);

    /**
     * 
     * 				This operation allows to modify one or more geo configuration entries.
     * 			
     * 
     * @param location
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "SetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation")
    @RequestWrapper(localName = "SetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocation")
    @ResponseWrapper(localName = "SetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocationResponse")
    public Future<?> setGeoLocationAsync(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetGeoLocationResponse> asyncHandler);

    /**
     * 
     * 				This operation allows to modify one or more geo configuration entries.
     * 			
     * 
     * @param location
     */
    @WebMethod(operationName = "SetGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation")
    @RequestWrapper(localName = "SetGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocation")
    @ResponseWrapper(localName = "SetGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetGeoLocationResponse")
    public void setGeoLocation(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location);

    /**
     * 
     * 				This operation deletes the given geo location entries.
     * 			
     * 
     * @param location
     * @return
     *     returns javax.xml.ws.Response<org.onvif.ver10.device.wsdl.DeleteGeoLocationResponse>
     */
    @WebMethod(operationName = "DeleteGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation")
    @RequestWrapper(localName = "DeleteGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocation")
    @ResponseWrapper(localName = "DeleteGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocationResponse")
    public Response<DeleteGeoLocationResponse> deleteGeoLocationAsync(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location);

    /**
     * 
     * 				This operation deletes the given geo location entries.
     * 			
     * 
     * @param location
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DeleteGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation")
    @RequestWrapper(localName = "DeleteGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocation")
    @ResponseWrapper(localName = "DeleteGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocationResponse")
    public Future<?> deleteGeoLocationAsync(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteGeoLocationResponse> asyncHandler);

    /**
     * 
     * 				This operation deletes the given geo location entries.
     * 			
     * 
     * @param location
     */
    @WebMethod(operationName = "DeleteGeoLocation", action = "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation")
    @RequestWrapper(localName = "DeleteGeoLocation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocation")
    @ResponseWrapper(localName = "DeleteGeoLocationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteGeoLocationResponse")
    public void deleteGeoLocation(
        @WebParam(name = "Location", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        List<LocationEntity> location);

}
